{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Background The Monterey Bay Aquarium Research Institute ( MBARI ) Wave-Energy converter is a point-absorber type wave-energy converter that has been operating in Monterey Bay, CA since 2014. This system was developed as part of MBARI's goals of advancing and demonstrating an autonomous and persistent presence of oceanographic instrumentation in the worlds oceans. This project is complemented by developments in autonomous underwater vehicles, underwater vehicle docking, oceanographic instrumentation, autonomy, and science use. The MBARI-WEC is currently maintained by MBARI and operates for six-month periods near the MBARI facility in Moss Landing, California, and averages about 250 Watts of power capture, averaged through the weather cycles and seasons. THe MBARI WEC is a complete system with a four-quadrant electro-hydraulic power-take-off device, board battery storage, control-computers, sensors and instrumentation, and an always-on cell-modem connection to the internet. The architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continuously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the micro-controllers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. This project provides a software interface to the system to allow such algorithms to be efficiently developed, tested, and executed. Using this interface, MBARI intends to make the system available to external researchers. By providing access to the hardware during the ongoing MBARI deployments of this system, the intention is to provide access to hardware that is often otherwise unavailable. To facilitate this, the project has developed a simulator that provides the same interface as the real hardware, allowing projects the ability to develop and test their work independently, before deployment on the real system which will occur under MBARI supervision. The following sections of this documentation outlines the physical system, describes the software- interfaces available, describes the simulation environment, and provides all information needed to interact with this project. The software interface is built upon the ROS 2 framework, and the simulation environment uses Ignition Gazebo . In addition to descriptions of these systems, the documentation provides a number of tutorials intended to lead a new user through the installation of the necessary tools, basic operation of the system, and provide guidance on implement new algorithms to run on the simulator and ultimately the buoy. This is an open-source project with all necessary code and resources freely available.","title":"Home"},{"location":"#background","text":"The Monterey Bay Aquarium Research Institute ( MBARI ) Wave-Energy converter is a point-absorber type wave-energy converter that has been operating in Monterey Bay, CA since 2014. This system was developed as part of MBARI's goals of advancing and demonstrating an autonomous and persistent presence of oceanographic instrumentation in the worlds oceans. This project is complemented by developments in autonomous underwater vehicles, underwater vehicle docking, oceanographic instrumentation, autonomy, and science use. The MBARI-WEC is currently maintained by MBARI and operates for six-month periods near the MBARI facility in Moss Landing, California, and averages about 250 Watts of power capture, averaged through the weather cycles and seasons. THe MBARI WEC is a complete system with a four-quadrant electro-hydraulic power-take-off device, board battery storage, control-computers, sensors and instrumentation, and an always-on cell-modem connection to the internet. The architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continuously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the micro-controllers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. This project provides a software interface to the system to allow such algorithms to be efficiently developed, tested, and executed. Using this interface, MBARI intends to make the system available to external researchers. By providing access to the hardware during the ongoing MBARI deployments of this system, the intention is to provide access to hardware that is often otherwise unavailable. To facilitate this, the project has developed a simulator that provides the same interface as the real hardware, allowing projects the ability to develop and test their work independently, before deployment on the real system which will occur under MBARI supervision. The following sections of this documentation outlines the physical system, describes the software- interfaces available, describes the simulation environment, and provides all information needed to interact with this project. The software interface is built upon the ROS 2 framework, and the simulation environment uses Ignition Gazebo . In addition to descriptions of these systems, the documentation provides a number of tutorials intended to lead a new user through the installation of the necessary tools, basic operation of the system, and provide guidance on implement new algorithms to run on the simulator and ultimately the buoy. This is an open-source project with all necessary code and resources freely available.","title":"Background"},{"location":"ControlAndTelemetry/","text":"Telemetry","title":"Buoy Control and Telemetry"},{"location":"ControlAndTelemetry/#telemetry","text":"","title":"Telemetry"},{"location":"architecture/","text":"The MBARI Wave-Energy-Converter is a small point absorber design that includes a surface expression, an electro-hydraulic PTO, and a submerged heave-cone device. The system is moored to the seafloor (typically in 80m of water) through a chain-catenary mooring connected to an anchor. As waves excite the system, a differential motion results between the buoy at the surface and the submerged heave cone. Resisting this motion results in energy being absorbed by the system, and this energy is converted to electrical form and stored in a battery bank on the buoy. The rest of this section provides details about the various components of the system Buoy, Heave Cone, and Mooring The buoy in the MBARI-WEC has a diameter of 2.6m, a waterplane area of 5 m^2, and a mass of 1400kg. This buoy houses the system battery and compute infrastructure, described below. The heave-cone component sits at about 30m depth and provides inertia and drag for the surface-buoy to pull against. The heave-cone has operable doors that can be opened to reduce the drag and inertial of this component in high sea-states. When the doors are open, the heave-cone has added-mass of about 10,000kg, in addition to it's own 600kg mass. When opened, the added-mass reduces to about 3,000kg, which reduces the inertial forcing and increses the natural frequency of the buoy -- heave-cone pair. A chain-catenary mooring and anchor connects to heave-cone to the ocean floor, keeping the buoy on-station. The system loading due to the mooring increases in higher winds and currents, but remains relatively low compared with the inertia forces the heave-cone creates. PTO System The power take-off device is located below the buoy and converts the differential motion and forces between the buoy and heave-cone from mechanical to eletrical energy. This device is an electro-hydraulic device in which a piston pumps oil through a hydraulic motor, causing an electrical motor/generator to spin and generate electrical energy. In parallel to the hydraulic ram, a pneumatic piston charged with an inert gas provides a sprint returning force for the system. The combination of the hydraulic and pneumatic pistons creates a spring-damper system for which the spring constant is set by the amount of gas in the systen, and the damping behavior is adjustable electronically by varying the torque on the hydraulic motor in response to conditions. The electrical-drive is a four-quadrant device in which the electric motor can operate as a generator in which energy flows into the battery, or as a motor in which energy is drawn from the battery. The winding-currents (and resulting torque) can be set arbitrarily, but by default the power take-off device acts as a generator, i.e. a damper resisting motion. Electrical System The electrical system of this buoy consists of a 325V battery system for energy storage, and a 24V system for powering ancillary instrumenation. The 325V battery is connected directly to the power take-off device motor drive electronics. In normal use, the motor-drive device is generating electrial energy at 325V which charges the battery system. In the case the battery is full (or dis-connected), the motor-drive system directs excess energy to an electrical load-dump device. This submerged heater plays a critcal role in maintaining a load on the power take-off device at all times. The electrical system also includes 300V-24V power supplies that provides 24 volts to the compute and instrumentation infrastructure in the system. In the case of low battery voltage due to an extended period of calm seas, the Compute and Control Systems The compute and control architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. See figure. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. The fundamental system behaviors are performed by a network of micro-controller based compute nodes, that communicate with the buoy Linux computer and with one-another through a Controller Area Network (CAN) bus. There are four of these controllers as follows: Battery Controller (BC_): This micro-controller monitors battery voltage, currents, state-of-charge, cell-balance, and environmental conditions inside the battery enclosure. This controller is largely a data-telemetery gathering item, but also includes an important low-voltage disconnect features which shuts down the 24V battery bus during periods of low-battery state-of-charge. During these periods the system continues to convert wave-energy and charge the batteries, but all sources of significant battery drain are disconnected which allows the battery to re-charge to a servicable level, even in calm conditions. Spring Controller (SC_): This micro-controller primarily monitors the piston position and a load-cell located between the buoy and power take-off component. Additionally, this controller responds to commands to change the gas pressure in each chamber of the pneumatic spring, a pumop to move gas from the lower pressure chamber to the higher pressure chamber, and a valve to do the opposite. Additionally, this controller can turn power on and off to the heave-cone. Power Converter (PC_): This controller implements the field-oriented control of the winding current in the generator. Heave-cone Controller (TC_): This The on-board linux computer is assessible from shore over a radio link (cell-modem, satellite, or line-of-site radio). This link enables enabling data-telemetry, real-time control, and software-updates to be applied to the Linux computer. Sensors and Measurements Load Cell: This is a load cell between the buoy and the power take-off device, and has a range of up to 20,000lbs. Piston Position: Inside the pneumatic spring there is a laser range-finder that contiously monitors the position of the power take-off piston. Pneumatic Pressures: The spring controller monitors the pressures of the two gas-chambers that make up the pneumatic spring. Buoy Inertial Measurement Unit: On-board the buoy there is a GPS disciplined six DOF attitude-heading and reference system. This unit monitors and resports the buoys attitude and GPS location. Heave Cone Inertial Measurement Unit: On-board the heave-cone there is an attitude-heading and reference system with a magnetometer and pressure sensor that reports the heave-cones orientation and depth. Electrical System Sensors: RADAR: Instrumentation Interface","title":"Architecture"},{"location":"architecture/#buoy-heave-cone-and-mooring","text":"The buoy in the MBARI-WEC has a diameter of 2.6m, a waterplane area of 5 m^2, and a mass of 1400kg. This buoy houses the system battery and compute infrastructure, described below. The heave-cone component sits at about 30m depth and provides inertia and drag for the surface-buoy to pull against. The heave-cone has operable doors that can be opened to reduce the drag and inertial of this component in high sea-states. When the doors are open, the heave-cone has added-mass of about 10,000kg, in addition to it's own 600kg mass. When opened, the added-mass reduces to about 3,000kg, which reduces the inertial forcing and increses the natural frequency of the buoy -- heave-cone pair. A chain-catenary mooring and anchor connects to heave-cone to the ocean floor, keeping the buoy on-station. The system loading due to the mooring increases in higher winds and currents, but remains relatively low compared with the inertia forces the heave-cone creates.","title":"Buoy, Heave Cone, and Mooring"},{"location":"architecture/#pto-system","text":"The power take-off device is located below the buoy and converts the differential motion and forces between the buoy and heave-cone from mechanical to eletrical energy. This device is an electro-hydraulic device in which a piston pumps oil through a hydraulic motor, causing an electrical motor/generator to spin and generate electrical energy. In parallel to the hydraulic ram, a pneumatic piston charged with an inert gas provides a sprint returning force for the system. The combination of the hydraulic and pneumatic pistons creates a spring-damper system for which the spring constant is set by the amount of gas in the systen, and the damping behavior is adjustable electronically by varying the torque on the hydraulic motor in response to conditions. The electrical-drive is a four-quadrant device in which the electric motor can operate as a generator in which energy flows into the battery, or as a motor in which energy is drawn from the battery. The winding-currents (and resulting torque) can be set arbitrarily, but by default the power take-off device acts as a generator, i.e. a damper resisting motion.","title":"PTO System"},{"location":"architecture/#electrical-system","text":"The electrical system of this buoy consists of a 325V battery system for energy storage, and a 24V system for powering ancillary instrumenation. The 325V battery is connected directly to the power take-off device motor drive electronics. In normal use, the motor-drive device is generating electrial energy at 325V which charges the battery system. In the case the battery is full (or dis-connected), the motor-drive system directs excess energy to an electrical load-dump device. This submerged heater plays a critcal role in maintaining a load on the power take-off device at all times. The electrical system also includes 300V-24V power supplies that provides 24 volts to the compute and instrumentation infrastructure in the system. In the case of low battery voltage due to an extended period of calm seas, the","title":"Electrical System"},{"location":"architecture/#compute-and-control-systems","text":"The compute and control architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. See figure. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. The fundamental system behaviors are performed by a network of micro-controller based compute nodes, that communicate with the buoy Linux computer and with one-another through a Controller Area Network (CAN) bus. There are four of these controllers as follows: Battery Controller (BC_): This micro-controller monitors battery voltage, currents, state-of-charge, cell-balance, and environmental conditions inside the battery enclosure. This controller is largely a data-telemetery gathering item, but also includes an important low-voltage disconnect features which shuts down the 24V battery bus during periods of low-battery state-of-charge. During these periods the system continues to convert wave-energy and charge the batteries, but all sources of significant battery drain are disconnected which allows the battery to re-charge to a servicable level, even in calm conditions. Spring Controller (SC_): This micro-controller primarily monitors the piston position and a load-cell located between the buoy and power take-off component. Additionally, this controller responds to commands to change the gas pressure in each chamber of the pneumatic spring, a pumop to move gas from the lower pressure chamber to the higher pressure chamber, and a valve to do the opposite. Additionally, this controller can turn power on and off to the heave-cone. Power Converter (PC_): This controller implements the field-oriented control of the winding current in the generator. Heave-cone Controller (TC_): This The on-board linux computer is assessible from shore over a radio link (cell-modem, satellite, or line-of-site radio). This link enables enabling data-telemetry, real-time control, and software-updates to be applied to the Linux computer.","title":"Compute and Control Systems"},{"location":"architecture/#sensors-and-measurements","text":"Load Cell: This is a load cell between the buoy and the power take-off device, and has a range of up to 20,000lbs. Piston Position: Inside the pneumatic spring there is a laser range-finder that contiously monitors the position of the power take-off piston. Pneumatic Pressures: The spring controller monitors the pressures of the two gas-chambers that make up the pneumatic spring. Buoy Inertial Measurement Unit: On-board the buoy there is a GPS disciplined six DOF attitude-heading and reference system. This unit monitors and resports the buoys attitude and GPS location. Heave Cone Inertial Measurement Unit: On-board the heave-cone there is an attitude-heading and reference system with a magnetometer and pressure sensor that reports the heave-cones orientation and depth. Electrical System Sensors: RADAR:","title":"Sensors and Measurements"},{"location":"architecture/#instrumentation-interface","text":"","title":"Instrumentation Interface"},{"location":"atseaoperation/","text":"Under Construction","title":"At Sea Operation"},{"location":"citation/","text":"Under Construction","title":"How to Cite"},{"location":"license/","text":"Copyright 2022 Open Source Robotics Foundation, Inc. and Monterey Bay Aquarium Research Institute Licensed under the Apache License, Version 2.0","title":"License"},{"location":"resources/","text":"Forum This project maintains a discussion forum at TBD and we try to respond as quickly as possible to all questions and discussion. This is the best way to reach the developers and maintainers of this project Source Code The simulator used in this project utilizes the Ignition Gazebo simulator as the base, with a number of custom PlugIns developed by this project to implement specific features needed to simulate this WEC. Ignition Gazebo and this projects plugins are open source projects and the source code for these can be accessed at https://github.com/gazebosim/gz-sim and https://github.com/osrf/buoy_entrypoint . Documentation in these respositories is intended for developers but does provide some detailed information about how the simulation works. Publications References","title":"Resources"},{"location":"resources/#forum","text":"This project maintains a discussion forum at TBD and we try to respond as quickly as possible to all questions and discussion. This is the best way to reach the developers and maintainers of this project","title":"Forum"},{"location":"resources/#source-code","text":"The simulator used in this project utilizes the Ignition Gazebo simulator as the base, with a number of custom PlugIns developed by this project to implement specific features needed to simulate this WEC. Ignition Gazebo and this projects plugins are open source projects and the source code for these can be accessed at https://github.com/gazebosim/gz-sim and https://github.com/osrf/buoy_entrypoint . Documentation in these respositories is intended for developers but does provide some detailed information about how the simulation works.","title":"Source Code"},{"location":"resources/#publications","text":"","title":"Publications"},{"location":"resources/#references","text":"","title":"References"},{"location":"ros2/","text":"Under Construction","title":"ROS2 Interface"},{"location":"simulation/","text":"Under Construction","title":"Simulation"},{"location":"theory/","text":"Modeling Technique Overview The numerical modeling used in this simulator relies upon the Gazebo simulators ability to solve for the motion of a collection of rigid bodies connected by various types of joints. Gazebo can use several different physics solvers to perform this solution, and the wave-energy buoy simulator in this project uses the DART physics engine. The physics engine solves the multi-body six degree-of-freedom problem for the motion of the connected buoy, power-take-off device, and heave cone, subject to initial conditions and forces that act on the various components as the simulation progresses. In the Gazebo simulator, these forces are provided by plugin code that applies forces to each body based on the state (position and velocity) of each component in the system at each timestep. The Gazebo simulator already includes several plugins that provide relevant forces such as buoyancy and hydrodynamic drag. Additionally, several additional plugins have been created for this simulator that provide the forcings on the system due to the electro-hydraulic power-take-off system, the pneumatic spring system, the tether connecting the PTO to the heave-cone, the mooring system that anchors the system, and the forcing on the buoy from the ocean surface waves. The sections below outline some details about how each of these forcings are modelled and computed. First however, the specific physical characteristics of the MBARI WEC are tabulated for reference. Physical Characteristics Each rigid body in the simulation has a \"Link Frame\" coordinate system in which all other characteristics of the body are defined in for computational purposes. This link-frame coordinate system is often selected to be at the location of a joint that connects the various bodies (which are also called links in the vernacular of Gazebo). Also, the description below includes alternative notation for added mass, e.g. \\\\ \\mu_{xx} , in the style of Newman. Surface Buoy Description Units m Buoy Mass 1400 kg V Displacement (undisturbed buoy) 2.39 m ^3 {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, 2.03) m {\\bf x}_{COB} Center of Buoyancy in Link Frame (x,y,z) (0.0, 0.0, 2.05) m {\\bf x}_{COW} Center of Waterplane in Link Frame, including PTO and cone (0.0, 0.0, 2.27) m S_{x} Second moment of area of water plane, about roll axis 1.37 m ^4 S_{y} Second moment of area of water plane, about pitch axis 1.37 m ^4 I_{xx} Roll Moment of Inertia (MOI) about center of mass 1450 kg m ^2 I_{yy} Pitch Moment of Inertia about center of mass 1450 kg m ^2 I_{zz} Yaw Moment of Inertia about center of mass 670 kg m ^2 A_{wp} Waterplane Area (undisturbed buoy) 5.47 m ^2 X_{\\dot{u}} Surge Added Mass ( \\mu_{xx} ) 260 kg X_{\\dot{q}} Surge-Pitch Added Mass, origin at pivot ( \\mu_{xq} ) 370 kg Y_{\\dot{v}} Sway Added Mass ( \\mu_{yy} ) 260 kg Y_{\\dot{p}} Sway-Roll Added Mass, origin at pivot ( \\mu_{yp} ) -370 kg Z_{\\dot{w}} Heave Added Mass ( \\mu_{zz} ) 3080 kg K_{\\dot{p}} Roll Added Mass MOI, origin at pivot ( \\mu_{pp} ) 780 kg m ^2 M_{\\dot{q}} Pitch Added Mass MOI, origin at pivot ( \\mu_{qq} ) 780 kg m ^2 X_{u\\mid u \\mid} Surge Quadratic Drag -430 kg/m Y_{v\\mid v \\mid} Sway Quadratic Drag -430 kg/m Z_{w\\mid w \\mid} Heave Quadratic Drag -3280 kg/m K_{p\\mid p \\mid} Roll Quadratic Drag: -880 kg m ^2 M_{q\\mid q \\mid} Pitch Quadratic Drag: -880 kg m ^2 N_{r\\mid r \\mid} Yaw Quadratic Drag: -50 kg m ^2 Buoy Link Frame is located at base of the buoy bridle at the pivot. Unspecified stability derivative values ( M_{\\dot{r}} , X_{uv} , Y_{vu} , etc) are zero. Added mass moments of inertia and stability derivatives are all specified about the link frame origin, i.e. the pivot. Mass moments of inertia are specified about the center of mass. Added mass values are infinite frequency. Free-Surface Hydrodynamic Coefficients and Impulse Response Functions can be found here : Power Take-Off Device Description Units m PTO Mass 605 kg V PTO Displacement .205 m ^3 {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, -4.0) m {\\bf x}_{COB} Center of Buoyancy in Link Frame (x,y,z) (0.0, 0.0, -3.0) m I_{xx} Roll Moment of Inertia about center of mass 3525 kg m ^2 I_{yy} Pitch Moment of Inertia about center of mass 3525 kg m ^2 I_{zz} Yaw Moment of Inertia about center of mass 10 kg m ^2 X_{\\dot{u}} Surge Added Mass ( \\mu_{xx} ) 310 kg X_{\\dot{q}} Surge-Pitch Added Mass MOI ( \\mu_{xq} ) 1250 kg m Y_{\\dot{v}} Sway Added Mass ( \\mu_{yy} ) 310 kg Y_{\\dot{p}} Sway-Roll Added Mass MOI ( \\mu_{yp} ) -1250 kg m Z_{\\dot{w}} Heave Added Mass ( \\mu_{zz} ) 10 kg K_{\\dot{p}} Roll Added Mass MOI ( \\mu_{pp} ) 7040 kg m ^2 M_{\\dot{q}} Pitch Added Mass MOI ( \\mu_{qq} ) 7040 kg m ^2 X_{u\\mid u \\mid} Surge Quadratic Drag -1140 kg/m Y_{v\\mid v \\mid} Sway Quadratic Drag -1140 kg/m Z_{w\\mid w \\mid} Heave Quadratic Drag -50 kg/m K_{p\\mid p \\mid} Roll Quadratic Drag -195400 kg m ^2 M_{p\\mid p \\mid} Pitch Quadratic Drag -195400 kg m ^2 N_{r\\mid r \\mid} Yaw Quadratic Drag -50 kg m ^2 PTO Link Frame is located at top attachment of the PTO (where connects to the buoy). Unspecified stability derivative values ( M_{\\dot{r}} , X_{uv} , Y_{vu} , etc) are zero. Added mass moments of inertia and stability derivatives are all specified about the link frame origin. Mass moments of inertia are specified about the center of mass. Piston Description Units m Piston Mass 48.0 kg {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, -2.58) m I_{xx} Roll Moment of Inertia 100.0 kg m ^2 I_{yy} Pitch Moment of Inertia 100.0 kg m ^2 I_{zz} Yaw Moment of Inertia 5.0 kg m ^2 The piston is contained with the PTO housing, so it has mass and moments of inertial, but contributes no buoyancy, added mass, or quadratic fluid drag. Heave Cone Description Units m Heave Cone Mass 820 kg V Heave Cone Displacement .12 m ^3 {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, -1.25) m {\\bf x}_{COB} Center of Buoyancy in Link Frame (x,y,z) (0.0, 0.0, -1.21) m I_{xx} Roll Moment of Inertia about the center of mass 340 kg m ^2 I_{yy} Pitch Moment of Inertia about the center of mass 340 kg m ^2 I_{zz} Yaw Moment of Inertia about the center of mass 610 kg m ^2 X_{\\dot{u}} Surge Added Mass ( \\mu_{xx} ) 720 kg X_{\\dot{q}} Surge-Pitch Added Mass MOI ( \\mu_{xq} ) 900 kg m Y_{\\dot{v}} Sway Added Mass ( \\mu_{yy} ) 720 kg Y_{\\dot{p}} Sway-Roll Added Mass MOI ( \\mu_{yp} ) -900 kg m Z_{\\dot{w}} Heave Added Mass: Doors Closed ( \\mu_{zz} ) 9330 kg Z_{\\dot{w}} Heave Added Mass: Doors Open 3000 kg K_{\\dot{p}} Roll Added Mass MOI ( \\mu_{pp} ) 3990 kg m ^2 M_{\\dot{q}} Pitch Added Mass MOI( \\mu_{qq} ) 3990 kg m ^2 N_{\\dot{r}} Yaw Added Mass MOI ( \\mu_{rr} ) 10 kg m ^2 X_{u\\mid u \\mid} Surge Quadratic Drag -1580 kg/m Y_{v\\mid v \\mid} Sway Quadratic Drag -1580 kg/m Z_{w\\mid w \\mid} Vertical Quadratic Drag: Doors Open -3200 kg/m Z_{w\\mid w \\mid} Vertical Quadratic Drag: Doors Closed -3900 kg/m K_{p\\mid p \\mid} Roll Quadratic Drag: -4620 kg m ^2 M_{q\\mid q \\mid} Pitch Quadratic Drag: -4620 kg m ^2 N_{r\\mid r \\mid} Yaw Quadratic Drag: -50 kg m ^2 Heave-Cone Link Frame is located at top attachment of the Heave Cone (where it connects to the tether). Unspecified stability derivative values ( M_{\\dot{r}} , X_{uv} , Y_{vu} , etc) are zero. Added mass moments of inertia and stability derivatives are all specified about the link frame origin. Mass moments of inertia are specified about the center of mass. Electro-Hydraulic PTO Forces Pneumatic Spring Forces Definitions Description Units x Piston position m v Piston velocity m/s m Mass of gas in chamber kg T Temperature of gas K P Gas pressure Pa V Chamber volume (dependent on piston position) m ^{3} R_{specific} Specific Gas Constant N _2 J/kg/K V_{dead} Chamber dead volume (fully compressed) m ^{3} c_p Specific Heat Capacity N _2 (constant pressure) J/kg/K A_{piston} Surface area of piston head m ^{2} n Polytropic index (Adiabatic if n=\\lambda=1.4 for N _2 ) N/A r Coefficient of heat transfer (Newton's Law of Cooling) 1/s Model Under compression and expansion, the pressure, volume and temperature of the Nitrogen in each chamber evolves according to Ideal Gas Law: P V = m R_{specific} T and a polytropic process: P = P_0 \\left({V_{0} \\over V}\\right)^{n} with hysteresis, there are two values for the polytropic index, n_1 and n_2 , to capture behavior when the gas is compressing or expanding. Using this quasi-static solution and discrete time steps, and also incorporating hysteresis, the process becomes: V_k = x_k A_{piston} + V_{dead} P_k = P_{k-1} \\left({V_{k-1} \\over V_k}\\right)^n ,\\,\\,\\, n = \\begin{cases} n_1 & \\text{if } v \\ge 0 \\\\ n_2 & \\text{otherwise.} \\end{cases} T_k = {P_k V_k \\over m R_{specific}} where k is the current time step. Whenever the piston velocity is slow enough, the process is dominated by heat loss and modeled with Newton's Law of Cooling (using forward difference) followed by an update of pressure using Ideal Gas Law: T_k = r\\, \\Delta t\\, (T_{env} - T_{k-1}) + T_{k-1} V_k = x_k A_{piston} + V_{dead} P_k = {m R_{specific} T_k \\over V_k} The mass of the Nitrogen in each chamber is determined from inputs in the SDF: m = {P_0 (x_0 A_{piston} + V_{dead}) \\over R_{specific} T_0} and is used for mass flow between chambers in simulating the pump/valve. Determining Parameter Values Linear regression was used to determine the polytropic indices for each chamber using empirical data from the physical system. Using pressure vs volume curves, n_1 is determined from increasing volume, and n_2 is determined from decreasing volume. The data is then preconditioned by taking the logarithm to linearize and perform regression to find the parameters. For a polytropic process: P V^{n} = C so, \\log{P} + n \\log{V} = \\log{C} \\left[ { \\begin{array}{cc} \\log{\\bf V} & 1 \\\\ \\end{array} } \\right] \\left[ { \\begin{array}{c} -n \\\\ \\log{C} \\\\ \\end{array} } \\right] = \\log{\\bf P} in block matrix notation where {\\bf V} and {\\bf P} are the arrays of volume and pressure data, respectively. The other parameters in the system are taken from CAD or empirically determined by comparing logged data from prescribed motion between simulation and the physical test bench. Tether Forces Mooring Forces Ocean Wave Forces","title":"Theory"},{"location":"theory/#modeling-technique-overview","text":"The numerical modeling used in this simulator relies upon the Gazebo simulators ability to solve for the motion of a collection of rigid bodies connected by various types of joints. Gazebo can use several different physics solvers to perform this solution, and the wave-energy buoy simulator in this project uses the DART physics engine. The physics engine solves the multi-body six degree-of-freedom problem for the motion of the connected buoy, power-take-off device, and heave cone, subject to initial conditions and forces that act on the various components as the simulation progresses. In the Gazebo simulator, these forces are provided by plugin code that applies forces to each body based on the state (position and velocity) of each component in the system at each timestep. The Gazebo simulator already includes several plugins that provide relevant forces such as buoyancy and hydrodynamic drag. Additionally, several additional plugins have been created for this simulator that provide the forcings on the system due to the electro-hydraulic power-take-off system, the pneumatic spring system, the tether connecting the PTO to the heave-cone, the mooring system that anchors the system, and the forcing on the buoy from the ocean surface waves. The sections below outline some details about how each of these forcings are modelled and computed. First however, the specific physical characteristics of the MBARI WEC are tabulated for reference.","title":"Modeling Technique Overview"},{"location":"theory/#physical-characteristics","text":"Each rigid body in the simulation has a \"Link Frame\" coordinate system in which all other characteristics of the body are defined in for computational purposes. This link-frame coordinate system is often selected to be at the location of a joint that connects the various bodies (which are also called links in the vernacular of Gazebo). Also, the description below includes alternative notation for added mass, e.g. \\\\ \\mu_{xx} , in the style of Newman.","title":"Physical Characteristics"},{"location":"theory/#surface-buoy","text":"Description Units m Buoy Mass 1400 kg V Displacement (undisturbed buoy) 2.39 m ^3 {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, 2.03) m {\\bf x}_{COB} Center of Buoyancy in Link Frame (x,y,z) (0.0, 0.0, 2.05) m {\\bf x}_{COW} Center of Waterplane in Link Frame, including PTO and cone (0.0, 0.0, 2.27) m S_{x} Second moment of area of water plane, about roll axis 1.37 m ^4 S_{y} Second moment of area of water plane, about pitch axis 1.37 m ^4 I_{xx} Roll Moment of Inertia (MOI) about center of mass 1450 kg m ^2 I_{yy} Pitch Moment of Inertia about center of mass 1450 kg m ^2 I_{zz} Yaw Moment of Inertia about center of mass 670 kg m ^2 A_{wp} Waterplane Area (undisturbed buoy) 5.47 m ^2 X_{\\dot{u}} Surge Added Mass ( \\mu_{xx} ) 260 kg X_{\\dot{q}} Surge-Pitch Added Mass, origin at pivot ( \\mu_{xq} ) 370 kg Y_{\\dot{v}} Sway Added Mass ( \\mu_{yy} ) 260 kg Y_{\\dot{p}} Sway-Roll Added Mass, origin at pivot ( \\mu_{yp} ) -370 kg Z_{\\dot{w}} Heave Added Mass ( \\mu_{zz} ) 3080 kg K_{\\dot{p}} Roll Added Mass MOI, origin at pivot ( \\mu_{pp} ) 780 kg m ^2 M_{\\dot{q}} Pitch Added Mass MOI, origin at pivot ( \\mu_{qq} ) 780 kg m ^2 X_{u\\mid u \\mid} Surge Quadratic Drag -430 kg/m Y_{v\\mid v \\mid} Sway Quadratic Drag -430 kg/m Z_{w\\mid w \\mid} Heave Quadratic Drag -3280 kg/m K_{p\\mid p \\mid} Roll Quadratic Drag: -880 kg m ^2 M_{q\\mid q \\mid} Pitch Quadratic Drag: -880 kg m ^2 N_{r\\mid r \\mid} Yaw Quadratic Drag: -50 kg m ^2 Buoy Link Frame is located at base of the buoy bridle at the pivot. Unspecified stability derivative values ( M_{\\dot{r}} , X_{uv} , Y_{vu} , etc) are zero. Added mass moments of inertia and stability derivatives are all specified about the link frame origin, i.e. the pivot. Mass moments of inertia are specified about the center of mass. Added mass values are infinite frequency. Free-Surface Hydrodynamic Coefficients and Impulse Response Functions can be found here :","title":"Surface Buoy"},{"location":"theory/#power-take-off-device","text":"Description Units m PTO Mass 605 kg V PTO Displacement .205 m ^3 {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, -4.0) m {\\bf x}_{COB} Center of Buoyancy in Link Frame (x,y,z) (0.0, 0.0, -3.0) m I_{xx} Roll Moment of Inertia about center of mass 3525 kg m ^2 I_{yy} Pitch Moment of Inertia about center of mass 3525 kg m ^2 I_{zz} Yaw Moment of Inertia about center of mass 10 kg m ^2 X_{\\dot{u}} Surge Added Mass ( \\mu_{xx} ) 310 kg X_{\\dot{q}} Surge-Pitch Added Mass MOI ( \\mu_{xq} ) 1250 kg m Y_{\\dot{v}} Sway Added Mass ( \\mu_{yy} ) 310 kg Y_{\\dot{p}} Sway-Roll Added Mass MOI ( \\mu_{yp} ) -1250 kg m Z_{\\dot{w}} Heave Added Mass ( \\mu_{zz} ) 10 kg K_{\\dot{p}} Roll Added Mass MOI ( \\mu_{pp} ) 7040 kg m ^2 M_{\\dot{q}} Pitch Added Mass MOI ( \\mu_{qq} ) 7040 kg m ^2 X_{u\\mid u \\mid} Surge Quadratic Drag -1140 kg/m Y_{v\\mid v \\mid} Sway Quadratic Drag -1140 kg/m Z_{w\\mid w \\mid} Heave Quadratic Drag -50 kg/m K_{p\\mid p \\mid} Roll Quadratic Drag -195400 kg m ^2 M_{p\\mid p \\mid} Pitch Quadratic Drag -195400 kg m ^2 N_{r\\mid r \\mid} Yaw Quadratic Drag -50 kg m ^2 PTO Link Frame is located at top attachment of the PTO (where connects to the buoy). Unspecified stability derivative values ( M_{\\dot{r}} , X_{uv} , Y_{vu} , etc) are zero. Added mass moments of inertia and stability derivatives are all specified about the link frame origin. Mass moments of inertia are specified about the center of mass.","title":"Power Take-Off Device"},{"location":"theory/#piston","text":"Description Units m Piston Mass 48.0 kg {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, -2.58) m I_{xx} Roll Moment of Inertia 100.0 kg m ^2 I_{yy} Pitch Moment of Inertia 100.0 kg m ^2 I_{zz} Yaw Moment of Inertia 5.0 kg m ^2 The piston is contained with the PTO housing, so it has mass and moments of inertial, but contributes no buoyancy, added mass, or quadratic fluid drag.","title":"Piston"},{"location":"theory/#heave-cone","text":"Description Units m Heave Cone Mass 820 kg V Heave Cone Displacement .12 m ^3 {\\bf x}_{COG} Center of Gravity in Link Frame (x,y,z) (0.0, 0.0, -1.25) m {\\bf x}_{COB} Center of Buoyancy in Link Frame (x,y,z) (0.0, 0.0, -1.21) m I_{xx} Roll Moment of Inertia about the center of mass 340 kg m ^2 I_{yy} Pitch Moment of Inertia about the center of mass 340 kg m ^2 I_{zz} Yaw Moment of Inertia about the center of mass 610 kg m ^2 X_{\\dot{u}} Surge Added Mass ( \\mu_{xx} ) 720 kg X_{\\dot{q}} Surge-Pitch Added Mass MOI ( \\mu_{xq} ) 900 kg m Y_{\\dot{v}} Sway Added Mass ( \\mu_{yy} ) 720 kg Y_{\\dot{p}} Sway-Roll Added Mass MOI ( \\mu_{yp} ) -900 kg m Z_{\\dot{w}} Heave Added Mass: Doors Closed ( \\mu_{zz} ) 9330 kg Z_{\\dot{w}} Heave Added Mass: Doors Open 3000 kg K_{\\dot{p}} Roll Added Mass MOI ( \\mu_{pp} ) 3990 kg m ^2 M_{\\dot{q}} Pitch Added Mass MOI( \\mu_{qq} ) 3990 kg m ^2 N_{\\dot{r}} Yaw Added Mass MOI ( \\mu_{rr} ) 10 kg m ^2 X_{u\\mid u \\mid} Surge Quadratic Drag -1580 kg/m Y_{v\\mid v \\mid} Sway Quadratic Drag -1580 kg/m Z_{w\\mid w \\mid} Vertical Quadratic Drag: Doors Open -3200 kg/m Z_{w\\mid w \\mid} Vertical Quadratic Drag: Doors Closed -3900 kg/m K_{p\\mid p \\mid} Roll Quadratic Drag: -4620 kg m ^2 M_{q\\mid q \\mid} Pitch Quadratic Drag: -4620 kg m ^2 N_{r\\mid r \\mid} Yaw Quadratic Drag: -50 kg m ^2 Heave-Cone Link Frame is located at top attachment of the Heave Cone (where it connects to the tether). Unspecified stability derivative values ( M_{\\dot{r}} , X_{uv} , Y_{vu} , etc) are zero. Added mass moments of inertia and stability derivatives are all specified about the link frame origin. Mass moments of inertia are specified about the center of mass.","title":"Heave Cone"},{"location":"theory/#electro-hydraulic-pto-forces","text":"","title":"Electro-Hydraulic PTO Forces"},{"location":"theory/#pneumatic-spring-forces","text":"","title":"Pneumatic Spring Forces"},{"location":"theory/#definitions","text":"Description Units x Piston position m v Piston velocity m/s m Mass of gas in chamber kg T Temperature of gas K P Gas pressure Pa V Chamber volume (dependent on piston position) m ^{3} R_{specific} Specific Gas Constant N _2 J/kg/K V_{dead} Chamber dead volume (fully compressed) m ^{3} c_p Specific Heat Capacity N _2 (constant pressure) J/kg/K A_{piston} Surface area of piston head m ^{2} n Polytropic index (Adiabatic if n=\\lambda=1.4 for N _2 ) N/A r Coefficient of heat transfer (Newton's Law of Cooling) 1/s","title":"Definitions"},{"location":"theory/#model","text":"Under compression and expansion, the pressure, volume and temperature of the Nitrogen in each chamber evolves according to Ideal Gas Law: P V = m R_{specific} T and a polytropic process: P = P_0 \\left({V_{0} \\over V}\\right)^{n} with hysteresis, there are two values for the polytropic index, n_1 and n_2 , to capture behavior when the gas is compressing or expanding. Using this quasi-static solution and discrete time steps, and also incorporating hysteresis, the process becomes: V_k = x_k A_{piston} + V_{dead} P_k = P_{k-1} \\left({V_{k-1} \\over V_k}\\right)^n ,\\,\\,\\, n = \\begin{cases} n_1 & \\text{if } v \\ge 0 \\\\ n_2 & \\text{otherwise.} \\end{cases} T_k = {P_k V_k \\over m R_{specific}} where k is the current time step. Whenever the piston velocity is slow enough, the process is dominated by heat loss and modeled with Newton's Law of Cooling (using forward difference) followed by an update of pressure using Ideal Gas Law: T_k = r\\, \\Delta t\\, (T_{env} - T_{k-1}) + T_{k-1} V_k = x_k A_{piston} + V_{dead} P_k = {m R_{specific} T_k \\over V_k} The mass of the Nitrogen in each chamber is determined from inputs in the SDF: m = {P_0 (x_0 A_{piston} + V_{dead}) \\over R_{specific} T_0} and is used for mass flow between chambers in simulating the pump/valve.","title":"Model"},{"location":"theory/#determining-parameter-values","text":"Linear regression was used to determine the polytropic indices for each chamber using empirical data from the physical system. Using pressure vs volume curves, n_1 is determined from increasing volume, and n_2 is determined from decreasing volume. The data is then preconditioned by taking the logarithm to linearize and perform regression to find the parameters. For a polytropic process: P V^{n} = C so, \\log{P} + n \\log{V} = \\log{C} \\left[ { \\begin{array}{cc} \\log{\\bf V} & 1 \\\\ \\end{array} } \\right] \\left[ { \\begin{array}{c} -n \\\\ \\log{C} \\\\ \\end{array} } \\right] = \\log{\\bf P} in block matrix notation where {\\bf V} and {\\bf P} are the arrays of volume and pressure data, respectively. The other parameters in the system are taken from CAD or empirically determined by comparing logged data from prescribed motion between simulation and the physical test bench.","title":"Determining Parameter Values"},{"location":"theory/#tether-forces","text":"","title":"Tether Forces"},{"location":"theory/#mooring-forces","text":"","title":"Mooring Forces"},{"location":"theory/#ocean-wave-forces","text":"","title":"Ocean Wave Forces"},{"location":"tutorials/","text":"Installation Install (from source) Install (Docker) Running the Simulator Run the Simulator View Tutorials/ROS 2 Messages View Messages with Plotjuggler Simulator Output Data Logs Adjust Simulator parameters Control Simulator with pbcmd Adding Control Code Tutorials/ROS 2 Messages and Services Controller GitHub Template (Python) Controller GitHub Template (C++) Linear Damper Example (Python) Open-Loop Control Example Closed-Loop Control Example Model-Predictive Control Example","title":"Tutorials"},{"location":"tutorials/#installation","text":"Install (from source) Install (Docker)","title":"Installation"},{"location":"tutorials/#running-the-simulator","text":"Run the Simulator View Tutorials/ROS 2 Messages View Messages with Plotjuggler Simulator Output Data Logs Adjust Simulator parameters Control Simulator with pbcmd","title":"Running the Simulator"},{"location":"tutorials/#adding-control-code","text":"Tutorials/ROS 2 Messages and Services Controller GitHub Template (Python) Controller GitHub Template (C++) Linear Damper Example (Python) Open-Loop Control Example Closed-Loop Control Example Model-Predictive Control Example","title":"Adding Control Code"},{"location":"Tutorials/Install/Install_docker/","text":"Docker images that include the neccessary software and dependencies have been created for convenience. Requirements Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker . Usage Clone the buoy_entrypoint repository to download the latest Dockerfile. $ git clone https://github.com/osrf/buoy_entrypoint.git $ cd ~/buoy_entrypoint/docker/ Build the docker image $ ./build.bash buoy Run the container $ ./run.bash [-d|s] buoy:latest where `./run.bash` option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the [On Host System](#on-host-system) instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: $ ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options. Run an example to test Inside the docker container, run: $ gz sim mbari_wec.sdf -r The simulation software should now be available. To run and test, proceed to the Run the Simulator tutorial series.","title":"Install docker"},{"location":"Tutorials/Install/Install_docker/#requirements","text":"Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker .","title":"Requirements"},{"location":"Tutorials/Install/Install_docker/#usage","text":"Clone the buoy_entrypoint repository to download the latest Dockerfile. $ git clone https://github.com/osrf/buoy_entrypoint.git $ cd ~/buoy_entrypoint/docker/ Build the docker image $ ./build.bash buoy Run the container $ ./run.bash [-d|s] buoy:latest where `./run.bash` option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the [On Host System](#on-host-system) instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: $ ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options.","title":"Usage"},{"location":"Tutorials/Install/Install_docker/#run-an-example-to-test","text":"Inside the docker container, run: $ gz sim mbari_wec.sdf -r The simulation software should now be available. To run and test, proceed to the Run the Simulator tutorial series.","title":"Run an example to test"},{"location":"Tutorials/Install/Install_source/","text":"Install Requirements Use Ubuntu 22.04. Install ROS 2 Humble Buoy Sim is tested against the cyclonedds rmw implementation, so set that up as follows: sudo apt install -y ros-humble-rmw-cyclonedds-cpp export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp Install Gazebo Garden Install necessary tools $ sudo apt install python3-vcstool python3-colcon-common-extensions python3-pip git wget Buoy Simulation Software Build Create a workspace, for example: $ mkdir -p ~/buoy_ws/src $ cd ~/buoy_ws/src Clone all source repos with the help of vcstool : $ wget https://raw.githubusercontent.com/osrf/buoy_entrypoint/main/buoy_all.yaml $ vcs import < buoy_all.yaml $ cd ~/buoy_ws Set the Gazebo version to Garden. This is needed because we're not using an official ROS + Gazebo combination: $ export GZ_VERSION=garden Install ROS dependencies $ sudo pip3 install -U rosdep $ sudo rosdep init $ rosdep update $ rosdep install --from-paths src --ignore-src -r -y -i Build and install $ source /opt/ros/humble/setup.bash $ cd ~/buoy_ws $ colcon build The simulation software should build without errors. To run and test, proceed to the Run the Simulator tutorial series. Or run a quick test as described below to confirm all has worked as expected. Run an example to test In a new terminal, source the workspace $ . ~/buoy_ws/install/setup.sh` Launch the simulation $ ros2 launch buoy_gazebo mbari_wec.launch.py`","title":"Install source"},{"location":"Tutorials/Install/Install_source/#install-requirements","text":"Use Ubuntu 22.04. Install ROS 2 Humble Buoy Sim is tested against the cyclonedds rmw implementation, so set that up as follows: sudo apt install -y ros-humble-rmw-cyclonedds-cpp export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp Install Gazebo Garden Install necessary tools $ sudo apt install python3-vcstool python3-colcon-common-extensions python3-pip git wget","title":"Install Requirements"},{"location":"Tutorials/Install/Install_source/#buoy-simulation-software-build","text":"Create a workspace, for example: $ mkdir -p ~/buoy_ws/src $ cd ~/buoy_ws/src Clone all source repos with the help of vcstool : $ wget https://raw.githubusercontent.com/osrf/buoy_entrypoint/main/buoy_all.yaml $ vcs import < buoy_all.yaml $ cd ~/buoy_ws Set the Gazebo version to Garden. This is needed because we're not using an official ROS + Gazebo combination: $ export GZ_VERSION=garden Install ROS dependencies $ sudo pip3 install -U rosdep $ sudo rosdep init $ rosdep update $ rosdep install --from-paths src --ignore-src -r -y -i Build and install $ source /opt/ros/humble/setup.bash $ cd ~/buoy_ws $ colcon build The simulation software should build without errors. To run and test, proceed to the Run the Simulator tutorial series. Or run a quick test as described below to confirm all has worked as expected.","title":"Buoy Simulation Software Build"},{"location":"Tutorials/Install/Install_source/#run-an-example-to-test","text":"In a new terminal, source the workspace $ . ~/buoy_ws/install/setup.sh` Launch the simulation $ ros2 launch buoy_gazebo mbari_wec.launch.py`","title":"Run an example to test"},{"location":"Tutorials/ROS2/CPPTemplate/","text":"","title":"CPPTemplate"},{"location":"Tutorials/ROS2/ClosedLoopControl/","text":"","title":"ClosedLoopControl"},{"location":"Tutorials/ROS2/MPC/","text":"","title":"MPC"},{"location":"Tutorials/ROS2/MessagesAndServices/","text":"","title":"MessagesAndServices"},{"location":"Tutorials/ROS2/OpenLoopControl/","text":"","title":"OpenLoopControl"},{"location":"Tutorials/ROS2/PythonLinearDamperExample/","text":"","title":"PythonLinearDamperExample"},{"location":"Tutorials/ROS2/PythonTemplate/","text":"Quick Start \u2014 Writing External Controller With GitHub Template Repository In this tutorial, you will make and customize a GitHub repository from a GitHub Template with a ROS 2 Python package and code ready to implement your own external controller utilizing the buoy_api_py interface. This interface may be used with the both the simulated and physical buoy. Interfaces and Templates There are two GitHub template repositories set up (C++/Python) for a quick start on writing a custom controller utilizing buoy_api_cpp and buoy_api_py . Please see C++ examples and Python examples for example controller implementations. mbari_wec_template_cpp mbari_wec_template_py Using Python Template Creating your own repo from the template You may also refer to GitHub's template documentation To start using the Python GitHub template Navigate to mbari_wec_template_py and click the green button with the text Use this template and select Create a new repository Next, set up the repository like you would any new GitHub repository choosing the owner, repository name, public/private, etc. Now that your new repository is set up, clone it to your local machine, make a branch, etc. $ git clone https://github.com/<owner>/<repo_name>.git You should now have a Python ROS 2 package with the following structure: <repo_name> \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 controller.yaml \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 controller.launch.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mbari_wec_template_py \u2502 \u251c\u2500\u2500 controller.py \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 resource \u2502 \u2514\u2500\u2500 mbari_wec_template_py \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 test \u251c\u2500\u2500 test_copyright.py \u251c\u2500\u2500 test_flake8.py \u2514\u2500\u2500 test_pep257.py Customizing the controller You may also refer to the README.md in your newly cloned repository. Modify template for your package Replace mbari_wec_template_py with your package name and modify other fields as necessary in: package.xml (lines 4-8) package.xml 1 2 3 4 5 6 7 8 <?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> repo_name </name> <!-- Update package name --> <version> 3.14 </version> <!-- Update version --> <description> Your Controller Description </description> <!-- Update description --> <maintainer email= \"your@email\" > Your Name </maintainer> <!-- Update email and name --> <license> Your License </license> <!-- Update license --> setup.py (lines 7, 11, 22-25, 29) setup.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package_name = 'your_package_name' # Update package name setup ( name = package_name , version = '3.14' , # Update version packages = [ f ' { package_name } ' ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( 'launch/*.launch.py' )), ( os . path . join ( 'share' , package_name , 'config' ), glob ( 'config/*.yaml' )) ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'Your Name' , # Update name maintainer_email = 'your@email' , # Update email description = 'Your package description' , # Update package description license = 'Your License' , # Update license tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ f 'your_controller_name = { package_name } .controller:main' , # Update controller executable name setup.cfg (lines 2, 4) Update script_dir and install_scripts locations with your package name setup.cfg 1 2 3 4 [develop] script_dir = $base/lib/your_package_name [install] install_scripts = $base/lib/your_package_name launch/controller.launch.py (lines 22, 34-35) launch/controller.launch.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package_name = 'your_package_name' # Update package name def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( package_name ), 'config' , 'controller.yaml' ) node = Node ( package = package_name , name = 'your_controller_name' , # Update controller name (same as name in config.yaml) executable = 'your_controller_name' , # Update controller executable name from setup.py config/controller.yaml (line 1) Update first line with your controller name (same as node name in launch file) config/controller.yaml 1 2 3 /your_controller_name : ros__parameters : foo : 1.0 and rename two files/folders the empty file resource/mbari_wec_template_py the Python package mbari_wec_template_py containing controller.py resulting in the following folder structure: repo_name \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 controller.yaml \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 controller.launch.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 your_package_name \u2502 \u251c\u2500\u2500 controller.py \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 resource \u2502 \u2514\u2500\u2500 your_package_name \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 test \u251c\u2500\u2500 test_copyright.py \u251c\u2500\u2500 test_flake8.py \u2514\u2500\u2500 test_pep257.py Modify setup.py as desired and add any dependencies in package.xml following standard ROS 2 documentation. Implement Controller Assuming you have followed the above and renamed the Python package mbari_wec_template_py to your package name, <your_package_name>/controller.py is stubbed out to implement your custom external controller. You may also use config/controller.yaml for any policy parameters. ControlPolicy You may use the class ControlPolicy in <your_package_name>/controller.py to implement your controller. 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class ControlPolicy ( object ): def __init__ ( self ): # Define any parameter variables here self . foo = 1.0 self . update_params () def update_params ( self ): '''Update dependent variables after reading in params''' self . bar = 10.0 * self . foo pass # remove if there's anything to set above # Modify function inputs as desired def target ( self , * args , ** kwargs ): '''Calculate target value from feedback inputs''' # secret sauce return 0.0 # obviously, modify to return proper target value Set any configurable parameters in __init__ on line 23 23 24 25 26 27 def __init__ ( self ): # Define any parameter variables here self . foo = 1.0 self . update_params () Set any dependent variables in update_params on line 29 29 30 31 32 33 def update_params ( self ): '''Update dependent variables after reading in params''' self . bar = 10.0 * self . foo pass # remove if there's anything to set above Declare/get/update params in the set_params function of the Controller class on line 111 111 112 113 114 115 116 117 118 def set_params ( self ): '''Use ROS 2 declare_parameter and get_parameter to set policy params''' self . declare_parameter ( 'foo' , self . policy . foo ) self . policy . foo = \\ self . get_parameter ( 'foo' ) . get_parameter_value () . double_value # recompute any dependent variables self . policy . update_params () Then, your control logic will go in the target function on line 36. Modify the input args as well as the return value as necessary 36 37 38 39 40 41 42 # Modify function inputs as desired def target ( self , * args , ** kwargs ): '''Calculate target value from feedback inputs''' # secret sauce return 0.0 # obviously, modify to return proper target value Controller The Controller class contains an instance of ControlPolicy as the member variable, self.policy . The self.policy.target function may be called anywhere within the Controller class. You may call it inside any of the data callbacks to enable feedback control (for example): # To subscribe to any topic, simply define the specific callback, e.g. power_callback def power_callback ( self , data ): '''Callback for '/power_data' topic from Power Controller''' # get target value from control policy target_value = self . policy . target ( data . rpm , data . scale , data . retract ) # send a command, e.g. winding current self . send_pc_wind_curr_command ( target_value , blocking = False ) Or, set up a loop in main() and run open-loop: 121 122 123 124 125 126 127 128 129 130 131 def main (): rclpy . init () controller = Controller () rate = controller . create_rate ( 50.0 ) # Hz while rclpy . ok (): # Open-loop control logic rclpy . spin_once ( controller ) rate . sleep () rclpy . shutdown () You may get feedback data from any of the buoy topics by simply creating a specific callback listed below. For feedback data you'd like to use in another area of the class, feel free to assign them to class variables. (Delete any callbacks you don't need in the Controller class) Available callback functions: /ahrs_data \u2192 def ahrs_callback(self, data): /battery_data \u2192 def battery_callback(self, data): /spring_data \u2192 def spring_callback(self, data): /power_data \u2192 def power_callback(self, data): /trefoil_data \u2192 def trefoil_callback(self, data): /powerbuoy_data \u2192 def powerbuoy_callback(self, data): You may also send commands from within the Controller class: self.send_pump_command(duration_mins, blocking=False) self.send_valve_command(duration_sec, blocking=False) self.send_pc_wind_curr_command(wind_curr_amps, blocking=False) self.send_pc_bias_curr_command(bias_curr_amps, blocking=False) self.send_pc_scale_command(scale_factor, blocking=False) self.send_pc_retract_command(retract_factor, blocking=False) Example An example using this interface will follow in the next tutorial: Linear Damper Example (Python)","title":"Quick Start &mdash; Writing External Controller With GitHub Template Repository"},{"location":"Tutorials/ROS2/PythonTemplate/#quick-start-writing-external-controller-with-github-template-repository","text":"In this tutorial, you will make and customize a GitHub repository from a GitHub Template with a ROS 2 Python package and code ready to implement your own external controller utilizing the buoy_api_py interface. This interface may be used with the both the simulated and physical buoy.","title":"Quick Start &mdash; Writing External Controller With GitHub Template Repository"},{"location":"Tutorials/ROS2/PythonTemplate/#interfaces-and-templates","text":"There are two GitHub template repositories set up (C++/Python) for a quick start on writing a custom controller utilizing buoy_api_cpp and buoy_api_py . Please see C++ examples and Python examples for example controller implementations. mbari_wec_template_cpp mbari_wec_template_py","title":"Interfaces and Templates"},{"location":"Tutorials/ROS2/PythonTemplate/#using-python-template","text":"","title":"Using Python Template"},{"location":"Tutorials/ROS2/PythonTemplate/#creating-your-own-repo-from-the-template","text":"You may also refer to GitHub's template documentation To start using the Python GitHub template Navigate to mbari_wec_template_py and click the green button with the text Use this template and select Create a new repository Next, set up the repository like you would any new GitHub repository choosing the owner, repository name, public/private, etc. Now that your new repository is set up, clone it to your local machine, make a branch, etc. $ git clone https://github.com/<owner>/<repo_name>.git You should now have a Python ROS 2 package with the following structure: <repo_name> \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 controller.yaml \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 controller.launch.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mbari_wec_template_py \u2502 \u251c\u2500\u2500 controller.py \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 resource \u2502 \u2514\u2500\u2500 mbari_wec_template_py \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 test \u251c\u2500\u2500 test_copyright.py \u251c\u2500\u2500 test_flake8.py \u2514\u2500\u2500 test_pep257.py","title":"Creating your own repo from the template"},{"location":"Tutorials/ROS2/PythonTemplate/#customizing-the-controller","text":"You may also refer to the README.md in your newly cloned repository.","title":"Customizing the controller"},{"location":"Tutorials/ROS2/PythonTemplate/#modify-template-for-your-package","text":"Replace mbari_wec_template_py with your package name and modify other fields as necessary in: package.xml (lines 4-8) package.xml 1 2 3 4 5 6 7 8 <?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> repo_name </name> <!-- Update package name --> <version> 3.14 </version> <!-- Update version --> <description> Your Controller Description </description> <!-- Update description --> <maintainer email= \"your@email\" > Your Name </maintainer> <!-- Update email and name --> <license> Your License </license> <!-- Update license --> setup.py (lines 7, 11, 22-25, 29) setup.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package_name = 'your_package_name' # Update package name setup ( name = package_name , version = '3.14' , # Update version packages = [ f ' { package_name } ' ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( 'launch/*.launch.py' )), ( os . path . join ( 'share' , package_name , 'config' ), glob ( 'config/*.yaml' )) ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'Your Name' , # Update name maintainer_email = 'your@email' , # Update email description = 'Your package description' , # Update package description license = 'Your License' , # Update license tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ f 'your_controller_name = { package_name } .controller:main' , # Update controller executable name setup.cfg (lines 2, 4) Update script_dir and install_scripts locations with your package name setup.cfg 1 2 3 4 [develop] script_dir = $base/lib/your_package_name [install] install_scripts = $base/lib/your_package_name launch/controller.launch.py (lines 22, 34-35) launch/controller.launch.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package_name = 'your_package_name' # Update package name def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( package_name ), 'config' , 'controller.yaml' ) node = Node ( package = package_name , name = 'your_controller_name' , # Update controller name (same as name in config.yaml) executable = 'your_controller_name' , # Update controller executable name from setup.py config/controller.yaml (line 1) Update first line with your controller name (same as node name in launch file) config/controller.yaml 1 2 3 /your_controller_name : ros__parameters : foo : 1.0 and rename two files/folders the empty file resource/mbari_wec_template_py the Python package mbari_wec_template_py containing controller.py resulting in the following folder structure: repo_name \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 controller.yaml \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 controller.launch.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 your_package_name \u2502 \u251c\u2500\u2500 controller.py \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 resource \u2502 \u2514\u2500\u2500 your_package_name \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 test \u251c\u2500\u2500 test_copyright.py \u251c\u2500\u2500 test_flake8.py \u2514\u2500\u2500 test_pep257.py Modify setup.py as desired and add any dependencies in package.xml following standard ROS 2 documentation.","title":"Modify template for your package"},{"location":"Tutorials/ROS2/PythonTemplate/#implement-controller","text":"Assuming you have followed the above and renamed the Python package mbari_wec_template_py to your package name, <your_package_name>/controller.py is stubbed out to implement your custom external controller. You may also use config/controller.yaml for any policy parameters.","title":"Implement Controller"},{"location":"Tutorials/ROS2/PythonTemplate/#controlpolicy","text":"You may use the class ControlPolicy in <your_package_name>/controller.py to implement your controller. 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class ControlPolicy ( object ): def __init__ ( self ): # Define any parameter variables here self . foo = 1.0 self . update_params () def update_params ( self ): '''Update dependent variables after reading in params''' self . bar = 10.0 * self . foo pass # remove if there's anything to set above # Modify function inputs as desired def target ( self , * args , ** kwargs ): '''Calculate target value from feedback inputs''' # secret sauce return 0.0 # obviously, modify to return proper target value Set any configurable parameters in __init__ on line 23 23 24 25 26 27 def __init__ ( self ): # Define any parameter variables here self . foo = 1.0 self . update_params () Set any dependent variables in update_params on line 29 29 30 31 32 33 def update_params ( self ): '''Update dependent variables after reading in params''' self . bar = 10.0 * self . foo pass # remove if there's anything to set above Declare/get/update params in the set_params function of the Controller class on line 111 111 112 113 114 115 116 117 118 def set_params ( self ): '''Use ROS 2 declare_parameter and get_parameter to set policy params''' self . declare_parameter ( 'foo' , self . policy . foo ) self . policy . foo = \\ self . get_parameter ( 'foo' ) . get_parameter_value () . double_value # recompute any dependent variables self . policy . update_params () Then, your control logic will go in the target function on line 36. Modify the input args as well as the return value as necessary 36 37 38 39 40 41 42 # Modify function inputs as desired def target ( self , * args , ** kwargs ): '''Calculate target value from feedback inputs''' # secret sauce return 0.0 # obviously, modify to return proper target value","title":"ControlPolicy"},{"location":"Tutorials/ROS2/PythonTemplate/#controller","text":"The Controller class contains an instance of ControlPolicy as the member variable, self.policy . The self.policy.target function may be called anywhere within the Controller class. You may call it inside any of the data callbacks to enable feedback control (for example): # To subscribe to any topic, simply define the specific callback, e.g. power_callback def power_callback ( self , data ): '''Callback for '/power_data' topic from Power Controller''' # get target value from control policy target_value = self . policy . target ( data . rpm , data . scale , data . retract ) # send a command, e.g. winding current self . send_pc_wind_curr_command ( target_value , blocking = False ) Or, set up a loop in main() and run open-loop: 121 122 123 124 125 126 127 128 129 130 131 def main (): rclpy . init () controller = Controller () rate = controller . create_rate ( 50.0 ) # Hz while rclpy . ok (): # Open-loop control logic rclpy . spin_once ( controller ) rate . sleep () rclpy . shutdown () You may get feedback data from any of the buoy topics by simply creating a specific callback listed below. For feedback data you'd like to use in another area of the class, feel free to assign them to class variables. (Delete any callbacks you don't need in the Controller class) Available callback functions: /ahrs_data \u2192 def ahrs_callback(self, data): /battery_data \u2192 def battery_callback(self, data): /spring_data \u2192 def spring_callback(self, data): /power_data \u2192 def power_callback(self, data): /trefoil_data \u2192 def trefoil_callback(self, data): /powerbuoy_data \u2192 def powerbuoy_callback(self, data): You may also send commands from within the Controller class: self.send_pump_command(duration_mins, blocking=False) self.send_valve_command(duration_sec, blocking=False) self.send_pc_wind_curr_command(wind_curr_amps, blocking=False) self.send_pc_bias_curr_command(bias_curr_amps, blocking=False) self.send_pc_scale_command(scale_factor, blocking=False) self.send_pc_retract_command(retract_factor, blocking=False)","title":"Controller"},{"location":"Tutorials/ROS2/PythonTemplate/#example","text":"An example using this interface will follow in the next tutorial: Linear Damper Example (Python)","title":"Example"},{"location":"Tutorials/ROS2/Template/","text":"","title":"Template"},{"location":"Tutorials/Simulation/RunSimulator/","text":"Introduction This tutorial will illustrate how to start the buoy simulation in Gazebo, when the simulation is running, a rendering of the buoy system motions will be visible, and ROS2 messages will be published that represent the buoy systems state. The simulation also provides the same ROS2 services the real buoy does, so will respond to ROS2 messages appropriately. Subsequent tutorials will illustrate how to view and plot data being published by the simulation, view data logs being generated, and control the simulated buoy with the command-line tool that is available on the buoy. Run To run the simulator, it is necessary to source the workspace in a separate terminal than was used to build the application. Therefore, open a new terminal window and do the following: Source the workspace $ . ~/buoy_ws/install/setup.sh Launch the simulation $ ros2 launch buoy_gazebo mbari_wec.launch.py The Gazebo rendering of the buoy system should become visible and appear as follows: To start the simulation, press the \"play\" arrow in the lower left, the buoy should start to move in response to incoming waves. It is also possible to adjust various parameters such as the sea-state, visibility of the rendering, and speed the simulation will run relative to real-time. These topics are covered in a later tutorial. To view the ROS2 messages and associated data while the simulation runs, proceed to the next tutorial: View ROS2 Messages","title":"RunSimulator"},{"location":"Tutorials/Simulation/RunSimulator/#introduction","text":"This tutorial will illustrate how to start the buoy simulation in Gazebo, when the simulation is running, a rendering of the buoy system motions will be visible, and ROS2 messages will be published that represent the buoy systems state. The simulation also provides the same ROS2 services the real buoy does, so will respond to ROS2 messages appropriately. Subsequent tutorials will illustrate how to view and plot data being published by the simulation, view data logs being generated, and control the simulated buoy with the command-line tool that is available on the buoy.","title":"Introduction"},{"location":"Tutorials/Simulation/RunSimulator/#run","text":"To run the simulator, it is necessary to source the workspace in a separate terminal than was used to build the application. Therefore, open a new terminal window and do the following: Source the workspace $ . ~/buoy_ws/install/setup.sh Launch the simulation $ ros2 launch buoy_gazebo mbari_wec.launch.py The Gazebo rendering of the buoy system should become visible and appear as follows: To start the simulation, press the \"play\" arrow in the lower left, the buoy should start to move in response to incoming waves. It is also possible to adjust various parameters such as the sea-state, visibility of the rendering, and speed the simulation will run relative to real-time. These topics are covered in a later tutorial. To view the ROS2 messages and associated data while the simulation runs, proceed to the next tutorial: View ROS2 Messages","title":"Run"},{"location":"Tutorials/Simulation/SimulatorInteractionPbcmd/","text":"Run-Time Control using pbcmd Introduction There is a small command interpreter running on the physical buoy that provides some control over the behavior of the buoy while it is deployed. This is a Linux executable that implements a number of commands, accepts appropriate arguments, and issues commands over the CANbus or ROS2 on the buoy to effect a change of buoy behavior. These commands can also be issued programmatically as described in subsequent tutorials, but pbcmd is the human interface. This same command and interface is implemented in the simulation environment, so it is possible to change the behavior of the simulated buoy from the command line in the same way as can be done on the physical buoy. However many of the possible commands are not sensible in the simulated environment, so are not implemented, but instead return a message indicating they aren't relevant in simulation. A key example is the command to open and close the heave-cone doors, because the simulator can not change this behavior while running, the command to do so is inactive. Similarly, it makes no sense to turn on and off the electrical ground fault detector that exists on the buoy, but does not exist in simulation. pbcmd Usage Issuing 'pbcmd' at the command prompt provides guidance on the possible commands. In simulation it also indicates which commands are supported in simulation, on the at-sea system, all commands have an effect. $ ./pbcmd pbcmd: Multi-call command Power Buoy dispatcher Supported commands (Simulation): * pump - Spring Controller pump off or on for a time in minutes <= 10 * valve - Spring Controller valve off or on for a time in seconds <= 12 * sc_pack_rate - Set the CANBUS packet rate from the spring controller * pc_Scale - Set the scale factor * pc_Retract - Set the retract factor * pc_WindCurr - Set the winding current target * pc_BiasCurr - Set the winding current bias * pc_PackRate - Set the CANBUS packet rate Currently unsupported commands (Simulation): * bender - Sets the state of the bender module * reset_battery - Reset battery controller (caution - no args) * tether - Spring Controller tether power on or off * reset_spring - Reset Spring Controller (caution - no args) * pc_VTargMax - Set the max target voltage * pc_ChargeCurrLim - Set the maximum battery charge current * pc_DrawCurrLim - Set the maximum battery current draw * pc_BattSwitch - Set the battery switch state * pc_Gain - Set the gain scheduler gain * pc_StdDevTarg - Set the target RPM standard deviation * tf_SetPos - Open/close the doors in the heave-cone * tf_SetActualPos - Open/close the doors in the heave-cone * tf_SetMode - Set controller mode * tf_SetChargeMode - Set Battery Charge mode * tf_SetStateMachine - Set Battery Charge mode * tf_SetCurrLim - Set controller current limit * tf_WatchDog - Toggle controller watchdog (caution - no args) * tf_Reset - Reset Controller (caution - no args) For help on a command use the command name, i.e. \"bender\"; Except the reset commands which take no arguments. DO NOT enter reset_battery and expect to get help. The command will execute! Note that at the end of this usage message, there is a hint that typing most commands without an argument will supply some further help. Command descriptions pump - This command turns on and off the gas pump that pumps Nitrogen from the upper pneumatic spring chamber to the lower spring chamber. The result of this is the mean position of the position will slowly rise. The rate is about 1\" per minute of pump action, a required argument for this command specifies how long the pump will run for, in minutes, and must be between 0 and 10. After this timeout the pump will stop even if no further commands are issued. A \"pump 0\" command stops the pump immediately. valve - The valve command releases Nitrogen gas from the lower chamber to the upper chamber, resulting in the mean position of the piston lowering. This process is much faster so the required argument for this command is in seconds, and must be between 0 and 10. After this timeout the valve closes even if no further commands are issued. A \"valve 0\" command closes the pump immediately. sc_pack_rate - This command sets the data packet rate for data coming from the spring controller, the required argument between 10 and 50 indicates the desired data rate in Hz. This controls the rate of the ROS2 messages from the spring controller on the buoy, and in the simulator. Example Usage","title":"SimulatorInteractionPbcmd"},{"location":"Tutorials/Simulation/SimulatorInteractionPbcmd/#run-time-control-using-pbcmd","text":"","title":"Run-Time Control using pbcmd"},{"location":"Tutorials/Simulation/SimulatorInteractionPbcmd/#introduction","text":"There is a small command interpreter running on the physical buoy that provides some control over the behavior of the buoy while it is deployed. This is a Linux executable that implements a number of commands, accepts appropriate arguments, and issues commands over the CANbus or ROS2 on the buoy to effect a change of buoy behavior. These commands can also be issued programmatically as described in subsequent tutorials, but pbcmd is the human interface. This same command and interface is implemented in the simulation environment, so it is possible to change the behavior of the simulated buoy from the command line in the same way as can be done on the physical buoy. However many of the possible commands are not sensible in the simulated environment, so are not implemented, but instead return a message indicating they aren't relevant in simulation. A key example is the command to open and close the heave-cone doors, because the simulator can not change this behavior while running, the command to do so is inactive. Similarly, it makes no sense to turn on and off the electrical ground fault detector that exists on the buoy, but does not exist in simulation.","title":"Introduction"},{"location":"Tutorials/Simulation/SimulatorInteractionPbcmd/#pbcmd-usage","text":"Issuing 'pbcmd' at the command prompt provides guidance on the possible commands. In simulation it also indicates which commands are supported in simulation, on the at-sea system, all commands have an effect. $ ./pbcmd pbcmd: Multi-call command Power Buoy dispatcher Supported commands (Simulation): * pump - Spring Controller pump off or on for a time in minutes <= 10 * valve - Spring Controller valve off or on for a time in seconds <= 12 * sc_pack_rate - Set the CANBUS packet rate from the spring controller * pc_Scale - Set the scale factor * pc_Retract - Set the retract factor * pc_WindCurr - Set the winding current target * pc_BiasCurr - Set the winding current bias * pc_PackRate - Set the CANBUS packet rate Currently unsupported commands (Simulation): * bender - Sets the state of the bender module * reset_battery - Reset battery controller (caution - no args) * tether - Spring Controller tether power on or off * reset_spring - Reset Spring Controller (caution - no args) * pc_VTargMax - Set the max target voltage * pc_ChargeCurrLim - Set the maximum battery charge current * pc_DrawCurrLim - Set the maximum battery current draw * pc_BattSwitch - Set the battery switch state * pc_Gain - Set the gain scheduler gain * pc_StdDevTarg - Set the target RPM standard deviation * tf_SetPos - Open/close the doors in the heave-cone * tf_SetActualPos - Open/close the doors in the heave-cone * tf_SetMode - Set controller mode * tf_SetChargeMode - Set Battery Charge mode * tf_SetStateMachine - Set Battery Charge mode * tf_SetCurrLim - Set controller current limit * tf_WatchDog - Toggle controller watchdog (caution - no args) * tf_Reset - Reset Controller (caution - no args) For help on a command use the command name, i.e. \"bender\"; Except the reset commands which take no arguments. DO NOT enter reset_battery and expect to get help. The command will execute! Note that at the end of this usage message, there is a hint that typing most commands without an argument will supply some further help.","title":"pbcmd Usage"},{"location":"Tutorials/Simulation/SimulatorInteractionPbcmd/#command-descriptions","text":"pump - This command turns on and off the gas pump that pumps Nitrogen from the upper pneumatic spring chamber to the lower spring chamber. The result of this is the mean position of the position will slowly rise. The rate is about 1\" per minute of pump action, a required argument for this command specifies how long the pump will run for, in minutes, and must be between 0 and 10. After this timeout the pump will stop even if no further commands are issued. A \"pump 0\" command stops the pump immediately. valve - The valve command releases Nitrogen gas from the lower chamber to the upper chamber, resulting in the mean position of the piston lowering. This process is much faster so the required argument for this command is in seconds, and must be between 0 and 10. After this timeout the valve closes even if no further commands are issued. A \"valve 0\" command closes the pump immediately. sc_pack_rate - This command sets the data packet rate for data coming from the spring controller, the required argument between 10 and 50 indicates the desired data rate in Hz. This controls the rate of the ROS2 messages from the spring controller on the buoy, and in the simulator.","title":"Command descriptions"},{"location":"Tutorials/Simulation/SimulatorInteractionPbcmd/#example-usage","text":"","title":"Example Usage"},{"location":"Tutorials/Simulation/SimulatorOutputLogs/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"SimulatorOutputLogs"},{"location":"Tutorials/Simulation/SimulatorOutputLogs/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"},{"location":"Tutorials/Simulation/SimulatorOutputPlotjuggler/","text":"\" PlotJuggler \" is a plotting program that includes support for ROS2 messages, and allows real-time plotting of data from ROS2 messages while the simulator runs, as well as plotting of logged data. To install, see instructions here . If using the supplied docker images, this step is not necessary as the software is already installed. To start, issue the following command in a window where the environment has already been sourced using $ . ~/buoy_ws/install/setup.sh : $ ros2 run plotjuggler plotjuggler After an entertaining splash-screen, a blank PlotJuggler screen will appear. Under \"Streaming\" (upper left, second item below \"File\"), select the \"ROS2 Topic Subscriber\" option and click \"Start\". A new window will appear showing the ROS2 topics available on the system. Note that the Gazebo Simulator of the buoy must be running for the ROS2 topics that contain the buoy data to be present. Select the /arhs_data, /power_data, /spring_data, battery_data, heavecone_data and /xb_data topics and click \"OK\" The selected topics will appear in the \"Timeseries List\" window, and selecting the carot to the left of each topic will expand them and show the data that can be plotted. Note that these topics and data are the same as are visible using the $ ros2 topic list and $ ros2 topic echo ... commands from the command-line. Dragging any data item into the plot field on the right will plot that data on a scrolling graph. The time-extent of the graph can be changed using the \"Buffer\" text-box under the \"Streaming\" box in the upper left. Graphs can be split horizontally and vertically to make room for more data items, see this guide for information on manipulating the PlotJuggler windows. After a bit of data selection, the window can look like the example below and show many data items in real-time. Under the \"File\" box in the upper left, there are options to save and retrieve this layout to avoid setting up the windows at each invocation of PlotJuggler. PlotJuggler will continue to run through re-starts of the simulator, so it is often not necessary to re-start PlotJuggler often.","title":"SimulatorOutputPlotjuggler"},{"location":"Tutorials/Simulation/SimulatorOutputROS/","text":"ROS2 Message While running, the simulator generates exactly the same ROS2 messages that the buoy hardware does during operation. These are grouped into ROS2 topics that corresponds to data being produced by each micro-controller or instrument on the buoy. To see all ROS2 topics being published to on the system, issue the following command (after sourcing the workspace if needed in a new terminal $ . ~/buoy_ws/install/setup.sh $ ros2 topic list /ahrs_data /clock /joint_states /parameter_events /power_data /rosout /spring_data /tf /tf_static /xb_imu The topics /ahrs_data, /battery_data, /spring_data, /power_data, and /heavecone_data coorespond to the buoy-based instrumentation (AHRS), battery controller, spring controller, power-converter controller, and heave-cone controller. To see the data being published in these topics, issue the following command and the data will scroll by: $ ros2 topic echo power_data --- header: stamp: sec: 712 nanosec: 710000000 frame_id: '' seq_num: 6703 rpm: 369.927978515625 sd_rpm: 0.0 voltage: 313.98431396484375 draw_curr_limit: 0.0 bcurrent: -0.14509780704975128 wcurrent: -0.2554447054862976 torque: 0.0 diff_press: 2.9100000858306885 bias_current: 0.0 loaddc: 0.0 scale: 1.0 retract: 0.6000000238418579 target_v: 0.0 target_a: -0.2554447054862976 charge_curr_limit: 0.0 status: 0 --- The data in each topic corresponds to the message descriptions which can be seen here along wit a description of each field. Several of these topics are only available in simulation, and only /ahrs_data, /battery_data, /spring_data, /power_data, and /heavecone_data will be present on the real buoy. The next tutorial \" View Messages with Plotjuggler \" shows how to conveniently plot these data items while the simulator is running.","title":"SimulatorOutputROS"},{"location":"Tutorials/Simulation/SimulatorOutputROS/#ros2-message","text":"While running, the simulator generates exactly the same ROS2 messages that the buoy hardware does during operation. These are grouped into ROS2 topics that corresponds to data being produced by each micro-controller or instrument on the buoy. To see all ROS2 topics being published to on the system, issue the following command (after sourcing the workspace if needed in a new terminal $ . ~/buoy_ws/install/setup.sh $ ros2 topic list /ahrs_data /clock /joint_states /parameter_events /power_data /rosout /spring_data /tf /tf_static /xb_imu The topics /ahrs_data, /battery_data, /spring_data, /power_data, and /heavecone_data coorespond to the buoy-based instrumentation (AHRS), battery controller, spring controller, power-converter controller, and heave-cone controller. To see the data being published in these topics, issue the following command and the data will scroll by: $ ros2 topic echo power_data --- header: stamp: sec: 712 nanosec: 710000000 frame_id: '' seq_num: 6703 rpm: 369.927978515625 sd_rpm: 0.0 voltage: 313.98431396484375 draw_curr_limit: 0.0 bcurrent: -0.14509780704975128 wcurrent: -0.2554447054862976 torque: 0.0 diff_press: 2.9100000858306885 bias_current: 0.0 loaddc: 0.0 scale: 1.0 retract: 0.6000000238418579 target_v: 0.0 target_a: -0.2554447054862976 charge_curr_limit: 0.0 status: 0 --- The data in each topic corresponds to the message descriptions which can be seen here along wit a description of each field. Several of these topics are only available in simulation, and only /ahrs_data, /battery_data, /spring_data, /power_data, and /heavecone_data will be present on the real buoy. The next tutorial \" View Messages with Plotjuggler \" shows how to conveniently plot these data items while the simulator is running.","title":"ROS2 Message"},{"location":"Tutorials/Simulation/SimulatorParameters/","text":"Parameters and Batch Runs Introduction When running a simple instance of the simulator as described in the Run the Simulator Tutorial. i.e. using: $ ros2 launch buoy_gazebo mbari_wec.launch.py the simulation uses a number of defaults for a range of parameters. In most cases, one may want to run the simulator with different values for these parameters, and/or run a number of simulations that iterate across a range of values for particular parameters. For instance, one may want to run the simulator in a batch mode that runs the same buoy and controller set-up in a range of sea-states. To facilitate this, a batch tool is provided that allows one to specify ranges for a number of parameters, and then run a number of simulations for all combinations of parameters, saving the results separately. This tutorial describes these capabilities, demonstrates with some examples, and discusses how this tool can be used. Parameters There are a number of parameters that impact the behavior of the simulator, and must be specified at start-up: Simulation duration : How long the simulation will run for (simulation time) in seconds. Time-step size : The simulation proceeds at a fixed time-step size, and this can be specified for each run. Heave cone door-state : Simulations can be done with the heave-cone doors either opened or closed, the door position can not be changed during a simulation, so this is a parameter that must be specified at start-up. Sea-State : Incoming waves can be specified as a monochromatic wave with a specified amplitude and period, a Bretschneider spectrum of waves described by significant wave-height and the peak period, or by a custom wave-spectrum defined by a curve of wave-energy versus frequency. Wave phase random seed : The phases of each wave-component are randomly assigned, if a seed is specified, the phases will be the same for each run of a simulation. This is useful for comparing simulations for which one wants the same wave-excitation. If the seed value is set to zero, or omitted, a different random phase assignment will be made for each simulation run. Physics Real-Time Factor (RTF) : This parameter sets the maximum speed the simulation will be allowed to run, in terms of a multiple of real-time. i.e. a Real-Time factor of 2.0 will limit the simulation to only running twice as fast as real-time. As described below, for single runs for which one may want to monitor the motion as it occurs, a Real-Time Factor of 1.0 is appropriate. For batches of runs one wants to complete as fast as possible, a large RTF (i.e. 100) will let the simulation run as fast as the processing resources allow. Battery State-of-Charge : The starting battery state of charge can be specified between 0 (empty) and 1 (full). A full battery can't absorb energy so more of the generated power will be diverted to the load-dump in the simulation. An empty battery will allow most or all of the generated energy to flow to the battery. This does not effect the physical behavior of the simulated buoy, but does effect the battery voltages and currents as the simulation progresses. Battery EMF : As an alternative to specifying the battery state of charge as a percentage, the zero-load battery voltage can be specified, between 270V (empty battery), and 320V (full battery). Scale Factor : The buoy (and simulator) implements a default control algorithm in which the current in the motor windings is set as a function of motor RPM, with the resulting torque opposing the motors motion. This approximately implements a linear damping behavior and the specified Scale Factor is multiplied by the default Winding-Current/RPM relationship before being applied. Allowable values are from 0.5 to 1.4, and the result is a simple way to change the damping the power-takeoff device is applying to the system. As discussed in a later tutorial, this relationship can be over-ridden with external code, so this Scale Factor only applies to the default behavior of the system. GUI Output : The graphical output of the simulator can be turned on or off as needed, for large batches of runs that are meant to run un-attended this is probably not appropriate, but for single runs or debugging the graphical output can be useful. Example Batch File The above parameters are specified in a .yaml file that the batch-run tool reads in before execution begins. A commented example is below and illustrates the use of the above parameters. Lines that begin with # are comments and have no impact. # # Batch-Specific Scalar Parameters # duration: 300 seed: 42 physics_rtf: 11 # # Run-Specific Parameters (Test Matrix) # physics_step: [0.001, 0.01, 0.1] door_state: ['closed', 'open'] scale_factor: [0.5, 0.75, 1.0, 1.3, 1.4] enable_gui: False # May specify vector/scalar battery_soc (0.0 to 1.0) or battery_emf (270V to 320V) battery_soc: [0.25, 0.5, 0.75, 1.0] # battery_emf: [282.5, 295.0, 307.5, 320.0] IncidentWaveSpectrumType: - MonoChromatic: # A & T may be vector/scalar in pairs (A & T same length) A: [1.0, 2.0, 3.0] T: [12.0, 14.0, 15.0] - Bretschneider: # Hs & Tp may be vector/scalar in pairs (Hs & Tp same length) Hs: 3.0 Tp: 14.0 # Multiple Custom Spectra must be listed individually (w & Szz are already vectors of same size) - Custom: w: [0.0, 0.2, 0.4, 0.6, 2.0] Szz: [0.0, 0.4, 1.0, 1.0, 0.0] As seen in this example, some parameters are enforced to be scalar values and apply to the entire batch of specified runs. These are the specification of simulation duration (300), random seed (42), and the physics real-time factor (11). The remaining run-specific parameters can be specified as arrays, and the batch-run tool then executes simulations for all possible combinations of these values. Note that some values are specified in pairs. For instance, three mono-chromatic waves are specified by this file with a specification of (A=1.0m, T=12s), (A=2.0m, T=14s), and (A=3.0m, T=15s), not nine runs that include all possible combinations of the specified amplitude and periods. Obviously it would be very easy to write a batch file specification that includes thousands of runs, more practical usage will most likely iterate over a small number of parameters at at a time. Running an example For a simpler example, a batch file that iterates across a range of sea-states is used. As a concise example, the following file illustrates this, comments have been removed for brevity. duration: 3 seed: 42 physics_rtf: 11 enable_gui: False physics_step: 0.01 door_state: ['closed'] scale_factor: [0.6, 1.0] battery_soc: 0.5 IncidentWaveSpectrumType: - Bretschneider: Hs: [2.0, 4.0] Tp: [14.0, 16.0] To run this example, create the above file in a new directory and name it \"IrregularWaves.yaml\", source the simulator installation directory, and start the simulation using the batch tool. (Note that the run duration is very short for this example to allow it to complete quickly) $ mkdir FOO $ cd FOO $ Create file using editor of your choice, name it IrregularWaves.yaml $ . ~/buoy_ws/install/setup.bash $ ros2 launch buoy_gazebo mbari_wec_batch.launch.py sim_params_yaml:=IrregularWaves.yaml Running these commands will run the simulation, all output is stored in a directory named similar to `batch_results_20230228210735', the trailing numbers indicate a timestamp. Inside this directory the yaml file is repeated, along with a log file 'batch_results.log' that lists all of the simulation runs that were performed. Alongside that are specific directories that hold output from each run. For convenience, a symbolic link is formed that points at the most recent batch output directory. Within the output directory, there is a file named 'batch_runs.log' that shows each individual run that was performed, and the associated parameter. In this case it has the following contents: # Generated 4 simulation runs RunIndex, SimReturnCode, StartTime, rosbag2FileName, PhysicsStep, PhysicsRTF, Seed, Duration, DoorState, ScaleFactor, BatteryState, IncWaveSpectrumType;In cWaveSpectrumParams 0, 0, 20230228212457, rosbag2_batch_sim_0_20230228212457, 0.01, 11.0, 42, 3.0, closed, 0.6, 0.5, Bretschneider;Hs:2.0;Tp:14.0 1, 0, 20230228212502, rosbag2_batch_sim_1_20230228212502, 0.01, 11.0, 42, 3.0, closed, 0.6, 0.5, Bretschneider;Hs:4.0;Tp:16.0 2, 0, 20230228212506, rosbag2_batch_sim_2_20230228212506, 0.01, 11.0, 42, 3.0, closed, 1.0, 0.5, Bretschneider;Hs:2.0;Tp:14.0 3, 0, 20230228212510, rosbag2_batch_sim_3_20230228212510, 0.01, 11.0, 42, 3.0, closed, 1.0, 0.5, Bretschneider;Hs:4.0;Tp:16.0 For simulations that take longer to run, it can be convenient to tail this log file from the terminal to keep track of progress. i.e. From the directory the batch was started from: $ tail -f latest_batch_results/batch_runs.log Finding the output Within the batch process output directory, (e.g. `batch_results_20230228210735'), the output of each simulation run is stored within a single sub-directory. The resulting directory tree from the above example is as follows: $ tree batch_results_20230301200627/ batch_results_20230301200627/ \u251c\u2500\u2500 batch_runs.log \u251c\u2500\u2500 IrregularWaves_20230301200627.yaml \u251c\u2500\u2500 results_run_0_20230301200627 \u2502 \u2514\u2500\u2500 rosbag2 \u2502 \u251c\u2500\u2500 metadata.yaml \u2502 \u2514\u2500\u2500 rosbag2_0.db3 \u251c\u2500\u2500 results_run_1_20230301200632 \u2502 \u2514\u2500\u2500 rosbag2 \u2502 \u251c\u2500\u2500 metadata.yaml \u2502 \u2514\u2500\u2500 rosbag2_0.db3 \u251c\u2500\u2500 results_run_2_20230301200636 \u2502 \u2514\u2500\u2500 rosbag2 \u2502 \u251c\u2500\u2500 metadata.yaml \u2502 \u2514\u2500\u2500 rosbag2_0.db3 \u2514\u2500\u2500 results_run_3_20230301200640 \u2514\u2500\u2500 rosbag2 \u251c\u2500\u2500 metadata.yaml \u2514\u2500\u2500 rosbag2_0.db3 This output includes rosbag files and .csv files that are in the same format as the files generated on the physical buoy. In general the information in these two files are the same, the .csv files are in clear text and are easy to inspect, and can be processed by the same tools used for the actual buoy data. The rosbag files are binary files that encode all of the ROS2 messages on the computer during the simulation. These files can be processed by a number of tools for post-processing and inspection of results. It is also possible to load the rosbag files into plotjuggler for plotting and inspection, as described in the View Messages with Plotjuggler Tutorial.","title":"SimulatorParameters"},{"location":"Tutorials/Simulation/SimulatorParameters/#parameters-and-batch-runs","text":"","title":"Parameters and Batch Runs"},{"location":"Tutorials/Simulation/SimulatorParameters/#introduction","text":"When running a simple instance of the simulator as described in the Run the Simulator Tutorial. i.e. using: $ ros2 launch buoy_gazebo mbari_wec.launch.py the simulation uses a number of defaults for a range of parameters. In most cases, one may want to run the simulator with different values for these parameters, and/or run a number of simulations that iterate across a range of values for particular parameters. For instance, one may want to run the simulator in a batch mode that runs the same buoy and controller set-up in a range of sea-states. To facilitate this, a batch tool is provided that allows one to specify ranges for a number of parameters, and then run a number of simulations for all combinations of parameters, saving the results separately. This tutorial describes these capabilities, demonstrates with some examples, and discusses how this tool can be used.","title":"Introduction"},{"location":"Tutorials/Simulation/SimulatorParameters/#parameters","text":"There are a number of parameters that impact the behavior of the simulator, and must be specified at start-up: Simulation duration : How long the simulation will run for (simulation time) in seconds. Time-step size : The simulation proceeds at a fixed time-step size, and this can be specified for each run. Heave cone door-state : Simulations can be done with the heave-cone doors either opened or closed, the door position can not be changed during a simulation, so this is a parameter that must be specified at start-up. Sea-State : Incoming waves can be specified as a monochromatic wave with a specified amplitude and period, a Bretschneider spectrum of waves described by significant wave-height and the peak period, or by a custom wave-spectrum defined by a curve of wave-energy versus frequency. Wave phase random seed : The phases of each wave-component are randomly assigned, if a seed is specified, the phases will be the same for each run of a simulation. This is useful for comparing simulations for which one wants the same wave-excitation. If the seed value is set to zero, or omitted, a different random phase assignment will be made for each simulation run. Physics Real-Time Factor (RTF) : This parameter sets the maximum speed the simulation will be allowed to run, in terms of a multiple of real-time. i.e. a Real-Time factor of 2.0 will limit the simulation to only running twice as fast as real-time. As described below, for single runs for which one may want to monitor the motion as it occurs, a Real-Time Factor of 1.0 is appropriate. For batches of runs one wants to complete as fast as possible, a large RTF (i.e. 100) will let the simulation run as fast as the processing resources allow. Battery State-of-Charge : The starting battery state of charge can be specified between 0 (empty) and 1 (full). A full battery can't absorb energy so more of the generated power will be diverted to the load-dump in the simulation. An empty battery will allow most or all of the generated energy to flow to the battery. This does not effect the physical behavior of the simulated buoy, but does effect the battery voltages and currents as the simulation progresses. Battery EMF : As an alternative to specifying the battery state of charge as a percentage, the zero-load battery voltage can be specified, between 270V (empty battery), and 320V (full battery). Scale Factor : The buoy (and simulator) implements a default control algorithm in which the current in the motor windings is set as a function of motor RPM, with the resulting torque opposing the motors motion. This approximately implements a linear damping behavior and the specified Scale Factor is multiplied by the default Winding-Current/RPM relationship before being applied. Allowable values are from 0.5 to 1.4, and the result is a simple way to change the damping the power-takeoff device is applying to the system. As discussed in a later tutorial, this relationship can be over-ridden with external code, so this Scale Factor only applies to the default behavior of the system. GUI Output : The graphical output of the simulator can be turned on or off as needed, for large batches of runs that are meant to run un-attended this is probably not appropriate, but for single runs or debugging the graphical output can be useful.","title":"Parameters"},{"location":"Tutorials/Simulation/SimulatorParameters/#example-batch-file","text":"The above parameters are specified in a .yaml file that the batch-run tool reads in before execution begins. A commented example is below and illustrates the use of the above parameters. Lines that begin with # are comments and have no impact. # # Batch-Specific Scalar Parameters # duration: 300 seed: 42 physics_rtf: 11 # # Run-Specific Parameters (Test Matrix) # physics_step: [0.001, 0.01, 0.1] door_state: ['closed', 'open'] scale_factor: [0.5, 0.75, 1.0, 1.3, 1.4] enable_gui: False # May specify vector/scalar battery_soc (0.0 to 1.0) or battery_emf (270V to 320V) battery_soc: [0.25, 0.5, 0.75, 1.0] # battery_emf: [282.5, 295.0, 307.5, 320.0] IncidentWaveSpectrumType: - MonoChromatic: # A & T may be vector/scalar in pairs (A & T same length) A: [1.0, 2.0, 3.0] T: [12.0, 14.0, 15.0] - Bretschneider: # Hs & Tp may be vector/scalar in pairs (Hs & Tp same length) Hs: 3.0 Tp: 14.0 # Multiple Custom Spectra must be listed individually (w & Szz are already vectors of same size) - Custom: w: [0.0, 0.2, 0.4, 0.6, 2.0] Szz: [0.0, 0.4, 1.0, 1.0, 0.0] As seen in this example, some parameters are enforced to be scalar values and apply to the entire batch of specified runs. These are the specification of simulation duration (300), random seed (42), and the physics real-time factor (11). The remaining run-specific parameters can be specified as arrays, and the batch-run tool then executes simulations for all possible combinations of these values. Note that some values are specified in pairs. For instance, three mono-chromatic waves are specified by this file with a specification of (A=1.0m, T=12s), (A=2.0m, T=14s), and (A=3.0m, T=15s), not nine runs that include all possible combinations of the specified amplitude and periods. Obviously it would be very easy to write a batch file specification that includes thousands of runs, more practical usage will most likely iterate over a small number of parameters at at a time.","title":"Example Batch File"},{"location":"Tutorials/Simulation/SimulatorParameters/#running-an-example","text":"For a simpler example, a batch file that iterates across a range of sea-states is used. As a concise example, the following file illustrates this, comments have been removed for brevity. duration: 3 seed: 42 physics_rtf: 11 enable_gui: False physics_step: 0.01 door_state: ['closed'] scale_factor: [0.6, 1.0] battery_soc: 0.5 IncidentWaveSpectrumType: - Bretschneider: Hs: [2.0, 4.0] Tp: [14.0, 16.0] To run this example, create the above file in a new directory and name it \"IrregularWaves.yaml\", source the simulator installation directory, and start the simulation using the batch tool. (Note that the run duration is very short for this example to allow it to complete quickly) $ mkdir FOO $ cd FOO $ Create file using editor of your choice, name it IrregularWaves.yaml $ . ~/buoy_ws/install/setup.bash $ ros2 launch buoy_gazebo mbari_wec_batch.launch.py sim_params_yaml:=IrregularWaves.yaml Running these commands will run the simulation, all output is stored in a directory named similar to `batch_results_20230228210735', the trailing numbers indicate a timestamp. Inside this directory the yaml file is repeated, along with a log file 'batch_results.log' that lists all of the simulation runs that were performed. Alongside that are specific directories that hold output from each run. For convenience, a symbolic link is formed that points at the most recent batch output directory. Within the output directory, there is a file named 'batch_runs.log' that shows each individual run that was performed, and the associated parameter. In this case it has the following contents: # Generated 4 simulation runs RunIndex, SimReturnCode, StartTime, rosbag2FileName, PhysicsStep, PhysicsRTF, Seed, Duration, DoorState, ScaleFactor, BatteryState, IncWaveSpectrumType;In cWaveSpectrumParams 0, 0, 20230228212457, rosbag2_batch_sim_0_20230228212457, 0.01, 11.0, 42, 3.0, closed, 0.6, 0.5, Bretschneider;Hs:2.0;Tp:14.0 1, 0, 20230228212502, rosbag2_batch_sim_1_20230228212502, 0.01, 11.0, 42, 3.0, closed, 0.6, 0.5, Bretschneider;Hs:4.0;Tp:16.0 2, 0, 20230228212506, rosbag2_batch_sim_2_20230228212506, 0.01, 11.0, 42, 3.0, closed, 1.0, 0.5, Bretschneider;Hs:2.0;Tp:14.0 3, 0, 20230228212510, rosbag2_batch_sim_3_20230228212510, 0.01, 11.0, 42, 3.0, closed, 1.0, 0.5, Bretschneider;Hs:4.0;Tp:16.0 For simulations that take longer to run, it can be convenient to tail this log file from the terminal to keep track of progress. i.e. From the directory the batch was started from: $ tail -f latest_batch_results/batch_runs.log","title":"Running an example"},{"location":"Tutorials/Simulation/SimulatorParameters/#finding-the-output","text":"Within the batch process output directory, (e.g. `batch_results_20230228210735'), the output of each simulation run is stored within a single sub-directory. The resulting directory tree from the above example is as follows: $ tree batch_results_20230301200627/ batch_results_20230301200627/ \u251c\u2500\u2500 batch_runs.log \u251c\u2500\u2500 IrregularWaves_20230301200627.yaml \u251c\u2500\u2500 results_run_0_20230301200627 \u2502 \u2514\u2500\u2500 rosbag2 \u2502 \u251c\u2500\u2500 metadata.yaml \u2502 \u2514\u2500\u2500 rosbag2_0.db3 \u251c\u2500\u2500 results_run_1_20230301200632 \u2502 \u2514\u2500\u2500 rosbag2 \u2502 \u251c\u2500\u2500 metadata.yaml \u2502 \u2514\u2500\u2500 rosbag2_0.db3 \u251c\u2500\u2500 results_run_2_20230301200636 \u2502 \u2514\u2500\u2500 rosbag2 \u2502 \u251c\u2500\u2500 metadata.yaml \u2502 \u2514\u2500\u2500 rosbag2_0.db3 \u2514\u2500\u2500 results_run_3_20230301200640 \u2514\u2500\u2500 rosbag2 \u251c\u2500\u2500 metadata.yaml \u2514\u2500\u2500 rosbag2_0.db3 This output includes rosbag files and .csv files that are in the same format as the files generated on the physical buoy. In general the information in these two files are the same, the .csv files are in clear text and are easy to inspect, and can be processed by the same tools used for the actual buoy data. The rosbag files are binary files that encode all of the ROS2 messages on the computer during the simulation. These files can be processed by a number of tools for post-processing and inspection of results. It is also possible to load the rosbag files into plotjuggler for plotting and inspection, as described in the View Messages with Plotjuggler Tutorial.","title":"Finding the output"}]}