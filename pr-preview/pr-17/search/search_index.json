{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Background The MBARI Wave-Energy conveter is a point-absorber type wave-energy conveter that has been operating in Monterey Bay, CA since 2014. This system was developed as part of Monterey Bay Aquarium Research Institutes goals of advancing and demonstrating an autonomous and persistent presence of oceanographic instrumentation in the worlds oceans. This project is complemented by developments in autonomous underwater vehicles, underwater vehicle docking, oceanographic instrumentation, autonomy, and science use. The MBARI-WEC is currently maintained by MBARI and operates for six-month periods near the MBARI facility in Moss Landing, California, and averages about 250 Watts of power capture, averaged through the weather cycles and seasons. THe MBARI WEC is a complete system with a four-quadrant electro-hydraulic power-take-off device, board battery storage, control-computers, sensors and instrumentation, and an always-on cell-modem connection to the internet. The architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. This project provides a software interface to the system to allow such algorithms to be efficiently developed, tested, and executed. Using this interfarce, MBARI intends to make the system available to external researchers. By providing access to the hardware during the ongoing MBARI deployments of this system, the intention is to provide access to hardware that is often otherwise unavailable. To facilitate this, the project has developed a simulator that provides the same interface as the real hardware, allowing projects the ability to develop and test their work independetly, before deployment on the real system which will occur under MBARI supervision. The following sections of this documentation outlines the physical system, describes the software-interfaces available, describes the simulation enviornoment, and provides all information needed to interact with this project. The software interface is built upon the ROS2 framework, and the simulation environment uses Ignition Gazebo . In addition to descriptions of these systems, the documentation provides a number of tutorials intended to lead a new user through the installation of the neccessary tools, basic operation of the system, and provide guidance on implement new alorithms to run on the simulator and ultimately the buoy. This is an open-source project with all neccessray code and resources freely available.","title":"Home"},{"location":"#background","text":"The MBARI Wave-Energy conveter is a point-absorber type wave-energy conveter that has been operating in Monterey Bay, CA since 2014. This system was developed as part of Monterey Bay Aquarium Research Institutes goals of advancing and demonstrating an autonomous and persistent presence of oceanographic instrumentation in the worlds oceans. This project is complemented by developments in autonomous underwater vehicles, underwater vehicle docking, oceanographic instrumentation, autonomy, and science use. The MBARI-WEC is currently maintained by MBARI and operates for six-month periods near the MBARI facility in Moss Landing, California, and averages about 250 Watts of power capture, averaged through the weather cycles and seasons. THe MBARI WEC is a complete system with a four-quadrant electro-hydraulic power-take-off device, board battery storage, control-computers, sensors and instrumentation, and an always-on cell-modem connection to the internet. The architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. This project provides a software interface to the system to allow such algorithms to be efficiently developed, tested, and executed. Using this interfarce, MBARI intends to make the system available to external researchers. By providing access to the hardware during the ongoing MBARI deployments of this system, the intention is to provide access to hardware that is often otherwise unavailable. To facilitate this, the project has developed a simulator that provides the same interface as the real hardware, allowing projects the ability to develop and test their work independetly, before deployment on the real system which will occur under MBARI supervision. The following sections of this documentation outlines the physical system, describes the software-interfaces available, describes the simulation enviornoment, and provides all information needed to interact with this project. The software interface is built upon the ROS2 framework, and the simulation environment uses Ignition Gazebo . In addition to descriptions of these systems, the documentation provides a number of tutorials intended to lead a new user through the installation of the neccessary tools, basic operation of the system, and provide guidance on implement new alorithms to run on the simulator and ultimately the buoy. This is an open-source project with all neccessray code and resources freely available.","title":"Background"},{"location":"ControlAndTelemetry/","text":"Telemetry","title":"Buoy Control and Telemetry"},{"location":"ControlAndTelemetry/#telemetry","text":"","title":"Telemetry"},{"location":"architecture/","text":"The MBARI Wave-Energy-Converter is a small point absorber design that includes a surface expression, an electro-hydraulic PTO, and a submerged heave-cone device. The system is moored to the seafloor (typically in 80m of water) through a chain-catenary mooring connected to an anchor. As waves excite the system, a differential motion results between the buoy at the surface and the submerged heave cone. Resisting this motion results in energy being absorbed by the system, and this energy is converted to electrical form and stored in a battery bank on the buoy. The rest of this section provides details about the various components of the system Buoy, Heave Cone, and Mooring The buoy in the MBARI-WEC has a diameter of 2.6m, a waterplane area of 5 m^2, and a mass of 1400kg. This buoy houses the system battery and compute infrastructure, described below. The heave-cone component sits at about 30m depth and provides inertia and drag for the surface-buoy to pull against. The heave-cone has operable doors that can be opened to reduce the drag and inertial of this component in high sea-states. When the doors are open, the heave-cone has added-mass of about 10,000kg, in addition to it's own 600kg mass. When opened, the added-mass reduces to about 3,000kg, which reduces the inertial forcing and increses the natural frequency of the buoy -- heave-cone pair. A chain-catenary mooring and anchor connects to heave-cone to the ocean floor, keeping the buoy on-station. The system loading due to the mooring increases in higher winds and currents, but remains relatively low compared with the inertia forces the heave-cone creates. PTO System The power take-off device is located below the buoy and converts the differential motion and forces between the buoy and heave-cone from mechanical to eletrical energy. This device is an electro-hydraulic device in which a piston pumps oil through a hydraulic motor, causing an electrical motor/generator to spin and generate electrical energy. In parallel to the hydraulic ram, a pneumatic piston charged with an inert gas provides a sprint returning force for the system. The combination of the hydraulic and pneumatic pistons creates a spring-damper system for which the spring constant is set by the amount of gas in the systen, and the damping behavior is adjustable electronically by varying the torque on the hydraulic motor in response to conditions. The electrical-drive is a four-quadrant device in which the electric motor can operate as a generator in which energy flows into the battery, or as a motor in which energy is drawn from the battery. The winding-currents (and resulting torque) can be set arbitrarily, but by default the power take-off device acts as a generator, i.e. a damper resisting motion. Electrical System The electrical system of this buoy consists of a 325V battery system for energy storage, and a 24V system for powering ancillary instrumenation. The 325V battery is connected directly to the power take-off device motor drive electronics. In normal use, the motor-drive device is generating electrial energy at 325V which charges the battery system. In the case the battery is full (or dis-connected), the motor-drive system directs excess energy to an electrical load-dump device. This submerged heater plays a critcal role in maintaining a load on the power take-off device at all times. The electrical system also includes 300V-24V power supplies that provides 24 volts to the compute and instrumentation infrastructure in the system. In the case of low battery voltage due to an extended period of calm seas, the Compute and Control Systems The compute and control architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. See figure. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. The fundamental system behaviors are performed by a network of micro-controller based compute nodes, that communicate with the buoy Linux computer and with one-another through a Controller Area Network (CAN) bus. There are four of these controllers as follows: Battery Controller (BC_): This micro-controller monitors battery voltage, currents, state-of-charge, cell-balance, and environmental conditions inside the battery enclosure. This controller is largely a data-telemetery gathering item, but also includes an important low-voltage disconnect features which shuts down the 24V battery bus during periods of low-battery state-of-charge. During these periods the system continues to convert wave-energy and charge the batteries, but all sources of significant battery drain are disconnected which allows the battery to re-charge to a servicable level, even in calm conditions. Spring Controller (SC_): This micro-controller primarily monitors the piston position and a load-cell located between the buoy and power take-off component. Additionally, this controller responds to commands to change the gas pressure in each chamber of the pneumatic spring, a pumop to move gas from the lower pressure chamber to the higher pressure chamber, and a valve to do the opposite. Additionally, this controller can turn power on and off to the heave-cone. Power Converter (PC_): This controller implements the field-oriented control of the winding current in the generator. Heave-cone Controller (TC_): This The on-board linux computer is assessible from shore over a radio link (cell-modem, satellite, or line-of-site radio). This link enables enabling data-telemetry, real-time control, and software-updates to be applied to the Linux computer. Sensors and Measurements Load Cell: This is a load cell between the buoy and the power take-off device, and has a range of up to 20,000lbs. Piston Position: Inside the pneumatic spring there is a laser range-finder that contiously monitors the position of the power take-off piston. Pneumatic Pressures: The spring controller monitors the pressures of the two gas-chambers that make up the pneumatic spring. Buoy Inertial Measurement Unit: On-board the buoy there is a GPS disciplined six DOF attitude-heading and reference system. This unit monitors and resports the buoys attitude and GPS location. Heave Cone Inertial Measurement Unit: On-board the heave-cone there is an attitude-heading and reference system with a magnetometer and pressure sensor that reports the heave-cones orientation and depth. Electrical System Sensors: RADAR: Instrumentation Interface","title":"Architecture"},{"location":"architecture/#buoy-heave-cone-and-mooring","text":"The buoy in the MBARI-WEC has a diameter of 2.6m, a waterplane area of 5 m^2, and a mass of 1400kg. This buoy houses the system battery and compute infrastructure, described below. The heave-cone component sits at about 30m depth and provides inertia and drag for the surface-buoy to pull against. The heave-cone has operable doors that can be opened to reduce the drag and inertial of this component in high sea-states. When the doors are open, the heave-cone has added-mass of about 10,000kg, in addition to it's own 600kg mass. When opened, the added-mass reduces to about 3,000kg, which reduces the inertial forcing and increses the natural frequency of the buoy -- heave-cone pair. A chain-catenary mooring and anchor connects to heave-cone to the ocean floor, keeping the buoy on-station. The system loading due to the mooring increases in higher winds and currents, but remains relatively low compared with the inertia forces the heave-cone creates.","title":"Buoy, Heave Cone, and Mooring"},{"location":"architecture/#pto-system","text":"The power take-off device is located below the buoy and converts the differential motion and forces between the buoy and heave-cone from mechanical to eletrical energy. This device is an electro-hydraulic device in which a piston pumps oil through a hydraulic motor, causing an electrical motor/generator to spin and generate electrical energy. In parallel to the hydraulic ram, a pneumatic piston charged with an inert gas provides a sprint returning force for the system. The combination of the hydraulic and pneumatic pistons creates a spring-damper system for which the spring constant is set by the amount of gas in the systen, and the damping behavior is adjustable electronically by varying the torque on the hydraulic motor in response to conditions. The electrical-drive is a four-quadrant device in which the electric motor can operate as a generator in which energy flows into the battery, or as a motor in which energy is drawn from the battery. The winding-currents (and resulting torque) can be set arbitrarily, but by default the power take-off device acts as a generator, i.e. a damper resisting motion.","title":"PTO System"},{"location":"architecture/#electrical-system","text":"The electrical system of this buoy consists of a 325V battery system for energy storage, and a 24V system for powering ancillary instrumenation. The 325V battery is connected directly to the power take-off device motor drive electronics. In normal use, the motor-drive device is generating electrial energy at 325V which charges the battery system. In the case the battery is full (or dis-connected), the motor-drive system directs excess energy to an electrical load-dump device. This submerged heater plays a critcal role in maintaining a load on the power take-off device at all times. The electrical system also includes 300V-24V power supplies that provides 24 volts to the compute and instrumentation infrastructure in the system. In the case of low battery voltage due to an extended period of calm seas, the","title":"Electrical System"},{"location":"architecture/#compute-and-control-systems","text":"The compute and control architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. See figure. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. The fundamental system behaviors are performed by a network of micro-controller based compute nodes, that communicate with the buoy Linux computer and with one-another through a Controller Area Network (CAN) bus. There are four of these controllers as follows: Battery Controller (BC_): This micro-controller monitors battery voltage, currents, state-of-charge, cell-balance, and environmental conditions inside the battery enclosure. This controller is largely a data-telemetery gathering item, but also includes an important low-voltage disconnect features which shuts down the 24V battery bus during periods of low-battery state-of-charge. During these periods the system continues to convert wave-energy and charge the batteries, but all sources of significant battery drain are disconnected which allows the battery to re-charge to a servicable level, even in calm conditions. Spring Controller (SC_): This micro-controller primarily monitors the piston position and a load-cell located between the buoy and power take-off component. Additionally, this controller responds to commands to change the gas pressure in each chamber of the pneumatic spring, a pumop to move gas from the lower pressure chamber to the higher pressure chamber, and a valve to do the opposite. Additionally, this controller can turn power on and off to the heave-cone. Power Converter (PC_): This controller implements the field-oriented control of the winding current in the generator. Heave-cone Controller (TC_): This The on-board linux computer is assessible from shore over a radio link (cell-modem, satellite, or line-of-site radio). This link enables enabling data-telemetry, real-time control, and software-updates to be applied to the Linux computer.","title":"Compute and Control Systems"},{"location":"architecture/#sensors-and-measurements","text":"Load Cell: This is a load cell between the buoy and the power take-off device, and has a range of up to 20,000lbs. Piston Position: Inside the pneumatic spring there is a laser range-finder that contiously monitors the position of the power take-off piston. Pneumatic Pressures: The spring controller monitors the pressures of the two gas-chambers that make up the pneumatic spring. Buoy Inertial Measurement Unit: On-board the buoy there is a GPS disciplined six DOF attitude-heading and reference system. This unit monitors and resports the buoys attitude and GPS location. Heave Cone Inertial Measurement Unit: On-board the heave-cone there is an attitude-heading and reference system with a magnetometer and pressure sensor that reports the heave-cones orientation and depth. Electrical System Sensors: RADAR:","title":"Sensors and Measurements"},{"location":"architecture/#instrumentation-interface","text":"","title":"Instrumentation Interface"},{"location":"atseaoperation/","text":"Under Construction","title":"At Sea Operation"},{"location":"citation/","text":"Under Construction","title":"How to Cite"},{"location":"license/","text":"Copyright 2022 Monterey Bay Aquarium Research Institute Licensed under the Apache License, Version 2.0","title":"License"},{"location":"resources/","text":"Forum This project maintains a discussion forum at https://xxx/ and we try to respond as quickly as possible to all questions and discussion. This is the best way to reach the developers and maintainers of this project Source Code The simulator used in this project utilizes the Ignition Gazebo simulator as the base, with a number of custom PlugIns developed by this project to implement specific features needed to simulate this WEC. Ignition Gazebo and this projects plugins are open source projects and the source code for these can be accessed at https://github.com/gazebosim/gz-sim and https://github.com/osrf/buoy_entrypoint . Documentation in these respositories is intended for developers but does provide some detailed information about how the simulation works. Publications References","title":"Resources"},{"location":"resources/#forum","text":"This project maintains a discussion forum at https://xxx/ and we try to respond as quickly as possible to all questions and discussion. This is the best way to reach the developers and maintainers of this project","title":"Forum"},{"location":"resources/#source-code","text":"The simulator used in this project utilizes the Ignition Gazebo simulator as the base, with a number of custom PlugIns developed by this project to implement specific features needed to simulate this WEC. Ignition Gazebo and this projects plugins are open source projects and the source code for these can be accessed at https://github.com/gazebosim/gz-sim and https://github.com/osrf/buoy_entrypoint . Documentation in these respositories is intended for developers but does provide some detailed information about how the simulation works.","title":"Source Code"},{"location":"resources/#publications","text":"","title":"Publications"},{"location":"resources/#references","text":"","title":"References"},{"location":"ros2/","text":"Under Construction","title":"ROS2 Interface"},{"location":"simulation/","text":"Under Construction","title":"Simulation"},{"location":"theory/","text":"Under Construction","title":"Theory"},{"location":"tutorials/","text":"Installation Install (docker) Install (apt) Install (from source) Running the Simulator Run the Simulator View Messages with Plotjuggler View ROS2 Messages Simulator Output Data Logs Control Simulator with pbcmd Adding Control Code ROS2 Messages and Services Project Template Open-Loop Control Example Closed-Loop Control Example Model-Predictive Control Example","title":"Tutorials"},{"location":"tutorials/#installation","text":"Install (docker) Install (apt) Install (from source)","title":"Installation"},{"location":"tutorials/#running-the-simulator","text":"Run the Simulator View Messages with Plotjuggler View ROS2 Messages Simulator Output Data Logs Control Simulator with pbcmd","title":"Running the Simulator"},{"location":"tutorials/#adding-control-code","text":"ROS2 Messages and Services Project Template Open-Loop Control Example Closed-Loop Control Example Model-Predictive Control Example","title":"Adding Control Code"},{"location":"Tutorials/Install/Install_apt/","text":"Requirements At the moment, only source installation is supported. Use Ubuntu Focal. Install ROS 2 Galactic Install Gazebo Fortress Install necessary tools sudo apt install python3-vcstool python3-colcon-common-extensions python3-pip git wget Usage Create a workspace, for example: mkdir -p ~/buoy_ws/src cd ~/buoy_ws/src Clone all source repos with the help of vcstool : wget https://raw.githubusercontent.com/osrf/buoy_entrypoint/main/buoy_all.yaml vcs import < buoy_all.yaml cd ~/buoy_ws Set the Gazebo version to Fortress. This is needed because we're not using an official ROS + Gazebo combination: export IGNITION_VERSION=fortress export GZ_VERSION=fortress Install ROS dependencies sudo pip3 install -U rosdep sudo rosdep init rosdep update rosdep install --from-paths src --ignore-src -r -y -i Build and install source /opt/ros/galactic/setup.bash cd ~/buoy_ws colcon build","title":"Install apt"},{"location":"Tutorials/Install/Install_apt/#requirements","text":"At the moment, only source installation is supported. Use Ubuntu Focal. Install ROS 2 Galactic Install Gazebo Fortress Install necessary tools sudo apt install python3-vcstool python3-colcon-common-extensions python3-pip git wget","title":"Requirements"},{"location":"Tutorials/Install/Install_apt/#usage","text":"Create a workspace, for example: mkdir -p ~/buoy_ws/src cd ~/buoy_ws/src Clone all source repos with the help of vcstool : wget https://raw.githubusercontent.com/osrf/buoy_entrypoint/main/buoy_all.yaml vcs import < buoy_all.yaml cd ~/buoy_ws Set the Gazebo version to Fortress. This is needed because we're not using an official ROS + Gazebo combination: export IGNITION_VERSION=fortress export GZ_VERSION=fortress Install ROS dependencies sudo pip3 install -U rosdep sudo rosdep init rosdep update rosdep install --from-paths src --ignore-src -r -y -i Build and install source /opt/ros/galactic/setup.bash cd ~/buoy_ws colcon build","title":"Usage"},{"location":"Tutorials/Install/Install_docker/","text":"Requirements Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker . Usage Clone the buoy_entrypoint repository to download the latest Dockerfile. git clone https://github.com/osrf/buoy_entrypoint.git cd ~/buoy_entrypoint/docker/ Build the docker image ./build.bash buoy Run the container ./run.bash [-d|s] buoy:latest where ./run.bash option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the On Host System instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options.","title":"Install docker"},{"location":"Tutorials/Install/Install_docker/#requirements","text":"Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker .","title":"Requirements"},{"location":"Tutorials/Install/Install_docker/#usage","text":"Clone the buoy_entrypoint repository to download the latest Dockerfile. git clone https://github.com/osrf/buoy_entrypoint.git cd ~/buoy_entrypoint/docker/ Build the docker image ./build.bash buoy Run the container ./run.bash [-d|s] buoy:latest where ./run.bash option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the On Host System instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options.","title":"Usage"},{"location":"Tutorials/Install/Install_source/","text":"Requirements Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker . Usage Clone the buoy_entrypoint repository to download the latest Dockerfile. git clone https://github.com/osrf/buoy_entrypoint.git cd ~/buoy_entrypoint/docker/ Build the docker image ./build.bash buoy Run the container ./run.bash [-d|s] buoy:latest where ./run.bash option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the On Host System instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options.","title":"Install source"},{"location":"Tutorials/Install/Install_source/#requirements","text":"Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker .","title":"Requirements"},{"location":"Tutorials/Install/Install_source/#usage","text":"Clone the buoy_entrypoint repository to download the latest Dockerfile. git clone https://github.com/osrf/buoy_entrypoint.git cd ~/buoy_entrypoint/docker/ Build the docker image ./build.bash buoy Run the container ./run.bash [-d|s] buoy:latest where ./run.bash option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the On Host System instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options.","title":"Usage"},{"location":"Tutorials/ROS2/ClosedLoopControl/","text":"","title":"ClosedLoopControl"},{"location":"Tutorials/ROS2/MPC/","text":"","title":"MPC"},{"location":"Tutorials/ROS2/MessagesAndServices/","text":"","title":"MessagesAndServices"},{"location":"Tutorials/ROS2/OpenLoopControl/","text":"","title":"OpenLoopControl"},{"location":"Tutorials/ROS2/Template/","text":"","title":"Template"},{"location":"Tutorials/Simulation/RunSimulator/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"RunSimulator"},{"location":"Tutorials/Simulation/RunSimulator/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"},{"location":"Tutorials/Simulation/SimulatorInteraction/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"SimulatorInteraction"},{"location":"Tutorials/Simulation/SimulatorInteraction/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"},{"location":"Tutorials/Simulation/SimulatorOutputLogs/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"SimulatorOutputLogs"},{"location":"Tutorials/Simulation/SimulatorOutputLogs/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"},{"location":"Tutorials/Simulation/SimulatorOutputPbcmd/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"SimulatorOutputPbcmd"},{"location":"Tutorials/Simulation/SimulatorOutputPbcmd/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"},{"location":"Tutorials/Simulation/SimulatorOutputPlotjuggler/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"SimulatorOutputPlotjuggler"},{"location":"Tutorials/Simulation/SimulatorOutputPlotjuggler/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"},{"location":"Tutorials/Simulation/SimulatorOutputROS/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"SimulatorOutputROS"},{"location":"Tutorials/Simulation/SimulatorOutputROS/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"}]}