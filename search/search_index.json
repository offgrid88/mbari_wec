{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Background The MBARI Wave-Energy conveter is a point-absorber type wave-energy conveter that has been operating in Monterey Bay, CA since 2014. This system was developed as part of Monterey Bay Aquarium Research Institutes goals of advancing and demonstrating an autonomous and persistent presence of oceanographic instrumentation in the worlds oceans. This project is complemented by developments in autonomous underwater vehicles, underwater vehicle docking, oceanographic instrumentation, autonomy, and science use. The MBARI-WEC is currently maintained by MBARI and operates for six-month periods near the MBARI facility in Moss Landing, California, and averages about 250 Watts of power capture, averaged through the weather cycles and seasons. THe MBARI WEC is a complete system with a four-quadrant electro-hydraulic power-take-off device, board battery storage, control-computers, sensors and instrumentation, and an always-on cell-modem connection to the internet. The architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. This project provides a software interface to the system to allow such algorithms to be efficiently developed, tested, and executed. Using this interfarce, MBARI intends to make the system available to external researchers. By providing access to the hardware during the ongoing MBARI deployments of this system, the intention is to provide access to hardware that is often otherwise unavailable. To facilitate this, the project has developed a simulator that provides the same interface as the real hardware, allowing projects the ability to develop and test their work independetly, before deployment on the real system which will occur under MBARI supervision. The following sections of this documentation outlines the physical system, describes the software-interfaces available, describes the simulation enviornoment, and provides all information needed to interact with this project. The software interface is built upon the ROS2 framework, and the simulation environment uses Ignition Gazebo . In addition to descriptions of these systems, the documentation provides a number of tutorials intended to lead a new user through the installation of the neccessary tools, basic operation of the system, and provide guidance on implement new alorithms to run on the simulator and ultimately the buoy. This is an open-source project with all neccessray code and resources freely available.","title":"Home"},{"location":"#background","text":"The MBARI Wave-Energy conveter is a point-absorber type wave-energy conveter that has been operating in Monterey Bay, CA since 2014. This system was developed as part of Monterey Bay Aquarium Research Institutes goals of advancing and demonstrating an autonomous and persistent presence of oceanographic instrumentation in the worlds oceans. This project is complemented by developments in autonomous underwater vehicles, underwater vehicle docking, oceanographic instrumentation, autonomy, and science use. The MBARI-WEC is currently maintained by MBARI and operates for six-month periods near the MBARI facility in Moss Landing, California, and averages about 250 Watts of power capture, averaged through the weather cycles and seasons. THe MBARI WEC is a complete system with a four-quadrant electro-hydraulic power-take-off device, board battery storage, control-computers, sensors and instrumentation, and an always-on cell-modem connection to the internet. The architecture of the system is such that critical functions are performed by micro-controllers throughout the system that implement default behaviors and stream sensor data continously. A Linux computer on the buoy performs data-logging and provides a command interface to the underlying micro-controllers. The system is designed such that the Linux computer is not necessary for safe behavior, if this computer re-boots or goes offline, the system will default to safe behaviors. Additionally, the microcontrollers will ignore damaging commands from the Linux computer. This architecture allows control algorithms running on the Linux computer to be started, stopped, and changed while the device is at sea through the cell-modem connection. This project provides a software interface to the system to allow such algorithms to be efficiently developed, tested, and executed. Using this interfarce, MBARI intends to make the system available to external researchers. By providing access to the hardware during the ongoing MBARI deployments of this system, the intention is to provide access to hardware that is often otherwise unavailable. To facilitate this, the project has developed a simulator that provides the same interface as the real hardware, allowing projects the ability to develop and test their work independetly, before deployment on the real system which will occur under MBARI supervision. The following sections of this documentation outlines the physical system, describes the software-interfaces available, describes the simulation enviornoment, and provides all information needed to interact with this project. The software interface is built upon the ROS2 framework, and the simulation environment uses Ignition Gazebo . In addition to descriptions of these systems, the documentation provides a number of tutorials intended to lead a new user through the installation of the neccessary tools, basic operation of the system, and provide guidance on implement new alorithms to run on the simulator and ultimately the buoy. This is an open-source project with all neccessray code and resources freely available.","title":"Background"},{"location":"architecture/","text":"The MBARI Wave-Energy-Converter is a small point absorber design that includes a surface expression, an electro-hydraulic PTO, and a submerged heave-cone device. The system is moored to the seafloor (typically in 80m of water) through a chain-catenary mooring connected to an anchor. As waves excite the system, a differential motion results between the buoy at the surface and the submerged heave cone. Resisting this motion results in energy being absorbed by the system, and this energy is converted to electrical form and stored in a battery bank on the buoy. The rest of this section provides details about the various components of the system Buoy, Heave Cone, and Mooring The buoy Electrical System Compute and Control Systems Sensors Load Cell Buoy IMU Heave Cone IMU Instrumentation Interface","title":"Architecture"},{"location":"architecture/#buoy-heave-cone-and-mooring","text":"The buoy","title":"Buoy, Heave Cone, and Mooring"},{"location":"architecture/#electrical-system","text":"","title":"Electrical System"},{"location":"architecture/#compute-and-control-systems","text":"","title":"Compute and Control Systems"},{"location":"architecture/#sensors","text":"","title":"Sensors"},{"location":"architecture/#load-cell","text":"","title":"Load Cell"},{"location":"architecture/#buoy-imu","text":"","title":"Buoy IMU"},{"location":"architecture/#heave-cone-imu","text":"","title":"Heave Cone IMU"},{"location":"architecture/#instrumentation-interface","text":"","title":"Instrumentation Interface"},{"location":"atseaoperation/","text":"Under Construction","title":"At Sea Operation"},{"location":"citation/","text":"Under Construction","title":"How to Cite"},{"location":"license/","text":"Copyright 2022 Monterey Bay Aquarium Research Institute Licensed under the Apache License, Version 2.0","title":"License"},{"location":"resources/","text":"Forum This project maintains a discussion forum at https://xxx/ and we try to respond as quickly as possible to all questions and discussion. This is the best way to reach the developers and maintainers of this project Source Code The simulator used in this project utilizes the Ignition Gazebo simulator as the base, with a number of custom PlugIns developed by this project to implement specific features needed to simulate this WEC. Ignition Gazebo and this projects plugins are open source projects and the source code for these can be accessed at https://github.com/gazebosim/gz-sim and https://github.com/osrf/buoy_entrypoint . Documentation in these respositories is intended for developers but does provide some detailed information about how the simulation works. Publications References","title":"Resources"},{"location":"resources/#forum","text":"This project maintains a discussion forum at https://xxx/ and we try to respond as quickly as possible to all questions and discussion. This is the best way to reach the developers and maintainers of this project","title":"Forum"},{"location":"resources/#source-code","text":"The simulator used in this project utilizes the Ignition Gazebo simulator as the base, with a number of custom PlugIns developed by this project to implement specific features needed to simulate this WEC. Ignition Gazebo and this projects plugins are open source projects and the source code for these can be accessed at https://github.com/gazebosim/gz-sim and https://github.com/osrf/buoy_entrypoint . Documentation in these respositories is intended for developers but does provide some detailed information about how the simulation works.","title":"Source Code"},{"location":"resources/#publications","text":"","title":"Publications"},{"location":"resources/#references","text":"","title":"References"},{"location":"ros2/","text":"Under Construction","title":"ROS2 Interface"},{"location":"simulation/","text":"Under Construction","title":"Simulation"},{"location":"theory/","text":"Under Construction","title":"Theory"},{"location":"tutorials/","text":"Tutorial 1: Installation These tutorials will get the required sofware set up on your computer. The software used by this system have dependencies on a number of software packages with specific versions. There are a few ways to install and use the software that provide equivalent capabilities, and are a matter of personal preference. Only one of the following tutorials is required. The simplest approach is to use docker . Docker images are provided that have pre-configured isntallations with all required dependencies, so this is the fast way to get started. Install (docker) It is also straightforward to simply install the required software and dependencies using apt on Linux. Some configuration is then required and details are provided here: Install (apt) Tutorial 2: Run the Simulator This tutorial will get the Gazebo Simulation of the WEC running on your computer. With this done you can see the operation of the simulator and perform actions that control it's behavior (e.g. Change the sea-state). Simulate Tutorial 3: Write and Control Code Simulate","title":"Tutorials"},{"location":"tutorials/#tutorial-1-installation","text":"These tutorials will get the required sofware set up on your computer. The software used by this system have dependencies on a number of software packages with specific versions. There are a few ways to install and use the software that provide equivalent capabilities, and are a matter of personal preference. Only one of the following tutorials is required. The simplest approach is to use docker . Docker images are provided that have pre-configured isntallations with all required dependencies, so this is the fast way to get started. Install (docker) It is also straightforward to simply install the required software and dependencies using apt on Linux. Some configuration is then required and details are provided here: Install (apt)","title":"Tutorial 1: Installation"},{"location":"tutorials/#tutorial-2-run-the-simulator","text":"This tutorial will get the Gazebo Simulation of the WEC running on your computer. With this done you can see the operation of the simulator and perform actions that control it's behavior (e.g. Change the sea-state). Simulate","title":"Tutorial 2: Run the Simulator"},{"location":"tutorials/#tutorial-3-write-and-control-code","text":"Simulate","title":"Tutorial 3: Write and Control Code"},{"location":"Tutorials/Install/Install_apt/","text":"Requirements At the moment, only source installation is supported. Use Ubuntu Focal. Install ROS 2 Galactic Install Gazebo Fortress Install necessary tools sudo apt install python3-vcstool python3-colcon-common-extensions python3-pip git wget Usage Create a workspace, for example: mkdir -p ~/buoy_ws/src cd ~/buoy_ws/src Clone all source repos with the help of vcstool : wget https://raw.githubusercontent.com/osrf/buoy_entrypoint/main/buoy_all.yaml vcs import < buoy_all.yaml cd ~/buoy_ws Set the Gazebo version to Fortress. This is needed because we're not using an official ROS + Gazebo combination: export IGNITION_VERSION=fortress export GZ_VERSION=fortress Install ROS dependencies sudo pip3 install -U rosdep sudo rosdep init rosdep update rosdep install --from-paths src --ignore-src -r -y -i Build and install source /opt/ros/galactic/setup.bash cd ~/buoy_ws colcon build","title":"Install apt"},{"location":"Tutorials/Install/Install_apt/#requirements","text":"At the moment, only source installation is supported. Use Ubuntu Focal. Install ROS 2 Galactic Install Gazebo Fortress Install necessary tools sudo apt install python3-vcstool python3-colcon-common-extensions python3-pip git wget","title":"Requirements"},{"location":"Tutorials/Install/Install_apt/#usage","text":"Create a workspace, for example: mkdir -p ~/buoy_ws/src cd ~/buoy_ws/src Clone all source repos with the help of vcstool : wget https://raw.githubusercontent.com/osrf/buoy_entrypoint/main/buoy_all.yaml vcs import < buoy_all.yaml cd ~/buoy_ws Set the Gazebo version to Fortress. This is needed because we're not using an official ROS + Gazebo combination: export IGNITION_VERSION=fortress export GZ_VERSION=fortress Install ROS dependencies sudo pip3 install -U rosdep sudo rosdep init rosdep update rosdep install --from-paths src --ignore-src -r -y -i Build and install source /opt/ros/galactic/setup.bash cd ~/buoy_ws colcon build","title":"Usage"},{"location":"Tutorials/Install/Install_docker/","text":"Requirements Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker . Usage Clone the buoy_entrypoint repository to download the latest Dockerfile. git clone https://github.com/osrf/buoy_entrypoint.git cd ~/buoy_entrypoint/docker/ Build the docker image ./build.bash buoy Run the container ./run.bash [-d|s] buoy:latest where ./run.bash option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the On Host System instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options.","title":"Install docker"},{"location":"Tutorials/Install/Install_docker/#requirements","text":"Install Docker using installation instructions. . Install nvidia-docker . Complete the Linux Postinstall steps to allow you to manage Docker as a non-root user. Install rocker by sudo apt-get install python3-rocker .","title":"Requirements"},{"location":"Tutorials/Install/Install_docker/#usage","text":"Clone the buoy_entrypoint repository to download the latest Dockerfile. git clone https://github.com/osrf/buoy_entrypoint.git cd ~/buoy_entrypoint/docker/ Build the docker image ./build.bash buoy Run the container ./run.bash [-d|s] buoy:latest where ./run.bash option: * -d Use for development with host system volume mount * -s Simulation purposes only The development use case enables to either use host system home directory for user's custom workspace, or a fresh clone inside the docker container. If using host system workspace, follow the On Host System instructions to build and run the project in the container. Regardless the script option, project source files can be found in `/tmp/buoy_ws/' in the container. Note that any changes to files in the container will have limited scope. To have another window running the same docker container, run this command in a new terminal: ./join.bash buoy_latest_runtime The build and run bash scripts are a wrapper around rocker, checkout its documentation for additional options.","title":"Usage"},{"location":"Tutorials/ROS2/ROS2/","text":"","title":"ROS2"},{"location":"Tutorials/Simulation/Simulation/","text":"Run Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Simulation"},{"location":"Tutorials/Simulation/Simulation/#run","text":"Source the workspace . ~/buoy_ws/install/setup.sh Launch the simulation ros2 launch buoy_gazebo mbari_wec.launch.py rviz:=True","title":"Run"}]}